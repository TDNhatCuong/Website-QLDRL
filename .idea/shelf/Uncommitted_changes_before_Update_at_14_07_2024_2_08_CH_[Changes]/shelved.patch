Index: trainingpointAPI/trainingpoint/migrations/0001_initial.py
===================================================================
diff --git a/trainingpointAPI/trainingpoint/migrations/0001_initial.py b/trainingpointAPI/trainingpoint/migrations/0001_initial.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpoint/migrations/0001_initial.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,266 +0,0 @@
-# Generated by Django 5.0.6 on 2024-05-30 09:06
-
-import ckeditor.fields
-import cloudinary.models
-import django.contrib.auth.models
-import django.contrib.auth.validators
-import django.db.models.deletion
-import django.utils.timezone
-from django.conf import settings
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = [
-        ('auth', '0012_alter_user_first_name_max_length'),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name='Dieu',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('created_date', models.DateTimeField(auto_now_add=True)),
-                ('updated_date', models.DateTimeField(auto_now=True)),
-                ('active', models.BooleanField(default=True)),
-                ('ma_dieu', models.CharField(max_length=10, unique=True)),
-                ('ten_dieu', models.CharField(max_length=255)),
-            ],
-            options={
-                'abstract': False,
-            },
-        ),
-        migrations.CreateModel(
-            name='Khoa',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('created_date', models.DateTimeField(auto_now_add=True)),
-                ('updated_date', models.DateTimeField(auto_now=True)),
-                ('active', models.BooleanField(default=True)),
-                ('ten_khoa', models.CharField(max_length=255)),
-            ],
-            options={
-                'abstract': False,
-            },
-        ),
-        migrations.CreateModel(
-            name='Tag',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('created_date', models.DateTimeField(auto_now_add=True)),
-                ('updated_date', models.DateTimeField(auto_now=True)),
-                ('active', models.BooleanField(default=True)),
-                ('name', models.CharField(max_length=50, unique=True)),
-            ],
-            options={
-                'abstract': False,
-            },
-        ),
-        migrations.CreateModel(
-            name='TaiKhoan',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('password', models.CharField(max_length=128, verbose_name='password')),
-                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
-                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
-                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
-                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
-                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
-                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
-                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
-                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
-                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
-                ('avatar', cloudinary.models.CloudinaryField(max_length=255, null=True)),
-                ('role', models.IntegerField(choices=[(1, 'Admin'), (2, 'Cộng Tác Sinh Viên'), (3, 'Trợ Lý Sinh Viên'), (4, 'Sinh Viên')], null=True)),
-                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
-                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
-            ],
-            options={
-                'verbose_name': 'user',
-                'verbose_name_plural': 'users',
-                'abstract': False,
-            },
-            managers=[
-                ('objects', django.contrib.auth.models.UserManager()),
-            ],
-        ),
-        migrations.CreateModel(
-            name='BaiViet',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('created_date', models.DateTimeField(auto_now_add=True)),
-                ('updated_date', models.DateTimeField(auto_now=True)),
-                ('active', models.BooleanField(default=True)),
-                ('title', models.CharField(max_length=255)),
-                ('content', ckeditor.fields.RichTextField(null=True)),
-                ('image', cloudinary.models.CloudinaryField(max_length=255)),
-                ('tro_ly', models.ForeignKey(limit_choices_to={'role': 3}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
-            ],
-            options={
-                'abstract': False,
-            },
-        ),
-        migrations.CreateModel(
-            name='Comment',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('created_date', models.DateTimeField(auto_now_add=True)),
-                ('updated_date', models.DateTimeField(auto_now=True)),
-                ('active', models.BooleanField(default=True)),
-                ('content', models.CharField(max_length=255)),
-                ('bai_viet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trainingpoint.baiviet')),
-                ('tai_khoan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
-            ],
-            options={
-                'abstract': False,
-            },
-        ),
-        migrations.CreateModel(
-            name='HoatDongNgoaiKhoa',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('created_date', models.DateTimeField(auto_now_add=True)),
-                ('updated_date', models.DateTimeField(auto_now=True)),
-                ('active', models.BooleanField(default=True)),
-                ('ten_HD_NgoaiKhoa', models.TextField()),
-                ('ngay_to_chuc', models.DateTimeField()),
-                ('thong_tin', ckeditor.fields.RichTextField(null=True)),
-                ('diem_ren_luyen', models.IntegerField(default=5)),
-                ('dieu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trainingpoint.dieu')),
-            ],
-            options={
-                'abstract': False,
-            },
-        ),
-        migrations.AddField(
-            model_name='baiviet',
-            name='hd_ngoaikhoa',
-            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trainingpoint.hoatdongngoaikhoa'),
-        ),
-        migrations.CreateModel(
-            name='HocKy_NamHoc',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('hoc_ky', models.IntegerField(choices=[(1, 'Một'), (2, 'Hai'), (3, 'Ba')])),
-                ('nam_hoc', models.CharField(max_length=9)),
-            ],
-            options={
-                'unique_together': {('hoc_ky', 'nam_hoc')},
-            },
-        ),
-        migrations.AddField(
-            model_name='hoatdongngoaikhoa',
-            name='hk_nh',
-            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trainingpoint.hocky_namhoc'),
-        ),
-        migrations.CreateModel(
-            name='Lop',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('created_date', models.DateTimeField(auto_now_add=True)),
-                ('updated_date', models.DateTimeField(auto_now=True)),
-                ('active', models.BooleanField(default=True)),
-                ('ten_lop', models.CharField(max_length=255)),
-                ('khoa', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='trainingpoint.khoa')),
-            ],
-            options={
-                'abstract': False,
-            },
-        ),
-        migrations.CreateModel(
-            name='SinhVien',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('mssv', models.CharField(max_length=10, unique=True)),
-                ('ho_ten', models.CharField(max_length=255)),
-                ('ngay_sinh', models.DateField()),
-                ('gioi_tinh', models.IntegerField(choices=[(1, 'Nam'), (2, 'Nữ')])),
-                ('email', models.EmailField(max_length=254, unique=True)),
-                ('dia_chi', models.TextField()),
-                ('lop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trainingpoint.lop')),
-            ],
-        ),
-        migrations.CreateModel(
-            name='DiemRenLuyen',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('created_date', models.DateTimeField(auto_now_add=True)),
-                ('updated_date', models.DateTimeField(auto_now=True)),
-                ('active', models.BooleanField(default=True)),
-                ('diem_tong', models.IntegerField()),
-                ('xep_loai', models.IntegerField(choices=[(1, 'Xuất Sắc'), (2, 'Giỏi'), (3, 'Khá'), (4, 'Trung Bình'), (5, 'Yếu'), (6, 'Kém')])),
-                ('hk_nh', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trainingpoint.hocky_namhoc')),
-                ('sinh_vien', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trainingpoint.sinhvien')),
-            ],
-            options={
-                'abstract': False,
-            },
-        ),
-        migrations.AddField(
-            model_name='baiviet',
-            name='tags',
-            field=models.ManyToManyField(blank=True, related_name='baiviets', to='trainingpoint.tag'),
-        ),
-        migrations.CreateModel(
-            name='ThamGia',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('trang_thai', models.IntegerField(choices=[(0, 'Đăng Ký'), (1, 'Điểm Danh'), (2, 'Báo Thiếu')], null=True)),
-                ('ngay_dang_ky', models.DateTimeField(auto_now_add=True)),
-                ('ngay_diem_danh', models.DateTimeField(auto_now=True)),
-                ('hd_ngoaikhoa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trainingpoint.hoatdongngoaikhoa')),
-                ('sinh_vien', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trainingpoint.sinhvien')),
-            ],
-        ),
-        migrations.CreateModel(
-            name='MinhChung',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('created_date', models.DateTimeField(auto_now_add=True)),
-                ('updated_date', models.DateTimeField(auto_now=True)),
-                ('active', models.BooleanField(default=True)),
-                ('description', ckeditor.fields.RichTextField()),
-                ('anh_minh_chung', cloudinary.models.CloudinaryField(max_length=255)),
-                ('tham_gia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trainingpoint.thamgia')),
-            ],
-            options={
-                'abstract': False,
-            },
-        ),
-        migrations.AddField(
-            model_name='hoatdongngoaikhoa',
-            name='sinh_vien',
-            field=models.ManyToManyField(through='trainingpoint.ThamGia', to='trainingpoint.sinhvien'),
-        ),
-        migrations.CreateModel(
-            name='TroLySinhVien_Khoa',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('created_date', models.DateTimeField(auto_now_add=True)),
-                ('updated_date', models.DateTimeField(auto_now=True)),
-                ('active', models.BooleanField(default=True)),
-                ('khoa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trainingpoint.khoa')),
-                ('trolySV', models.ForeignKey(limit_choices_to={'role': 3}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
-            ],
-            options={
-                'abstract': False,
-            },
-        ),
-        migrations.CreateModel(
-            name='Like',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('created_date', models.DateTimeField(auto_now_add=True)),
-                ('updated_date', models.DateTimeField(auto_now=True)),
-                ('active', models.BooleanField(default=True)),
-                ('bai_viet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trainingpoint.baiviet')),
-                ('tai_khoan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
-            ],
-            options={
-                'unique_together': {('bai_viet', 'tai_khoan')},
-            },
-        ),
-    ]
Index: trainingpointAPI/trainingpoint/migrations/0007_baiviet_tags.py
===================================================================
diff --git a/trainingpointAPI/trainingpoint/migrations/0007_baiviet_tags.py b/trainingpointAPI/trainingpoint/migrations/0007_baiviet_tags.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpoint/migrations/0007_baiviet_tags.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,18 +0,0 @@
-# Generated by Django 5.0.6 on 2024-06-13 09:59
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('trainingpoint', '0006_remove_baiviet_tags'),
-    ]
-
-    operations = [
-        migrations.AddField(
-            model_name='baiviet',
-            name='tags',
-            field=models.ManyToManyField(blank=True, related_name='baiviets', to='trainingpoint.tag'),
-        ),
-    ]
Index: trainingpointAPI/trainingpointAPI/wsgi.py
===================================================================
diff --git a/trainingpointAPI/trainingpointAPI/wsgi.py b/trainingpointAPI/trainingpointAPI/wsgi.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpointAPI/wsgi.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,16 +0,0 @@
-"""
-WSGI config for trainingpointappp project.
-
-It exposes the WSGI callable as a module-level variable named ``application``.
-
-For more information on this file, see
-https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
-"""
-
-import os
-
-from django.core.wsgi import get_wsgi_application
-
-os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'trainingpointappp.settings')
-
-application = get_wsgi_application()
Index: trainingpointAPI/.idea/modules.xml
===================================================================
diff --git a/trainingpointAPI/.idea/modules.xml b/trainingpointAPI/.idea/modules.xml
deleted file mode 100644
--- a/trainingpointAPI/.idea/modules.xml	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/trainingpointAPI.iml" filepath="$PROJECT_DIR$/.idea/trainingpointAPI.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
Index: trainingpointAPI/trainingpoint/migrations/0009_hocky_namhoc_active_hocky_namhoc_created_date_and_more.py
===================================================================
diff --git a/trainingpointAPI/trainingpoint/migrations/0009_hocky_namhoc_active_hocky_namhoc_created_date_and_more.py b/trainingpointAPI/trainingpoint/migrations/0009_hocky_namhoc_active_hocky_namhoc_created_date_and_more.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpoint/migrations/0009_hocky_namhoc_active_hocky_namhoc_created_date_and_more.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,68 +0,0 @@
-# Generated by Django 5.0.6 on 2024-06-17 09:24
-
-import ckeditor.fields
-import django.db.models.deletion
-import django.utils.timezone
-from django.conf import settings
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('trainingpoint', '0008_remove_baiviet_tags_delete_tag'),
-    ]
-
-    operations = [
-        migrations.AddField(
-            model_name='hocky_namhoc',
-            name='active',
-            field=models.BooleanField(default=True),
-        ),
-        migrations.AddField(
-            model_name='hocky_namhoc',
-            name='created_date',
-            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
-            preserve_default=False,
-        ),
-        migrations.AddField(
-            model_name='hocky_namhoc',
-            name='updated_date',
-            field=models.DateTimeField(auto_now=True),
-        ),
-        migrations.AddField(
-            model_name='minhchung',
-            name='phan_hoi',
-            field=ckeditor.fields.RichTextField(null=True),
-        ),
-        migrations.AlterField(
-            model_name='baiviet',
-            name='tro_ly',
-            field=models.ForeignKey(limit_choices_to={'role': 3}, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
-        ),
-        migrations.AlterField(
-            model_name='hoatdongngoaikhoa',
-            name='dieu',
-            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='trainingpoint.dieu'),
-        ),
-        migrations.AlterField(
-            model_name='hoatdongngoaikhoa',
-            name='hk_nh',
-            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='trainingpoint.hocky_namhoc'),
-        ),
-        migrations.AlterField(
-            model_name='hoatdongngoaikhoa',
-            name='tro_ly',
-            field=models.ForeignKey(limit_choices_to={'role': 3}, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
-        ),
-        migrations.AlterField(
-            model_name='lop',
-            name='khoa',
-            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='lop', to='trainingpoint.khoa'),
-        ),
-        migrations.AlterField(
-            model_name='trolysinhvien_khoa',
-            name='khoa',
-            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='trainingpoint.khoa'),
-        ),
-    ]
Index: trainingpointAPI/.idea/.gitignore
===================================================================
diff --git a/trainingpointAPI/.idea/.gitignore b/trainingpointAPI/.idea/.gitignore
deleted file mode 100644
--- a/trainingpointAPI/.idea/.gitignore	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,8 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
-# Editor-based HTTP Client requests
-/httpRequests/
-# Datasource local storage ignored files
-/dataSources/
-/dataSources.local.xml
Index: trainingpointAPI/trainingpoint/migrations/0010_alter_lop_khoa.py
===================================================================
diff --git a/trainingpointAPI/trainingpoint/migrations/0010_alter_lop_khoa.py b/trainingpointAPI/trainingpoint/migrations/0010_alter_lop_khoa.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpoint/migrations/0010_alter_lop_khoa.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,19 +0,0 @@
-# Generated by Django 5.0.6 on 2024-06-17 15:12
-
-import django.db.models.deletion
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('trainingpoint', '0009_hocky_namhoc_active_hocky_namhoc_created_date_and_more'),
-    ]
-
-    operations = [
-        migrations.AlterField(
-            model_name='lop',
-            name='khoa',
-            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='trainingpoint.khoa'),
-        ),
-    ]
Index: trainingpointAPI/trainingpoint/migrations/0004_hoatdongngoaikhoa_tro_ly.py
===================================================================
diff --git a/trainingpointAPI/trainingpoint/migrations/0004_hoatdongngoaikhoa_tro_ly.py b/trainingpointAPI/trainingpoint/migrations/0004_hoatdongngoaikhoa_tro_ly.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpoint/migrations/0004_hoatdongngoaikhoa_tro_ly.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,21 +0,0 @@
-# Generated by Django 5.0.6 on 2024-06-11 13:11
-
-import django.db.models.deletion
-from django.conf import settings
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('trainingpoint', '0003_dieu_diem_toi_da_alter_thamgia_trang_thai'),
-    ]
-
-    operations = [
-        migrations.AddField(
-            model_name='hoatdongngoaikhoa',
-            name='tro_ly',
-            field=models.ForeignKey(default=6, limit_choices_to={'role': 3}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
-            preserve_default=False,
-        ),
-    ]
Index: trainingpointAPI/.idea/inspectionProfiles/Project_Default.xml
===================================================================
diff --git a/trainingpointAPI/.idea/inspectionProfiles/Project_Default.xml b/trainingpointAPI/.idea/inspectionProfiles/Project_Default.xml
deleted file mode 100644
--- a/trainingpointAPI/.idea/inspectionProfiles/Project_Default.xml	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,75 +0,0 @@
-<component name="InspectionProjectProfileManager">
-  <profile version="1.0">
-    <option name="myName" value="Project Default" />
-    <inspection_tool class="PyPackageRequirementsInspection" enabled="true" level="WARNING" enabled_by_default="true">
-      <option name="ignoredPackages">
-        <value>
-          <list size="62">
-            <item index="0" class="java.lang.String" itemvalue="greenlet" />
-            <item index="1" class="java.lang.String" itemvalue="cffi" />
-            <item index="2" class="java.lang.String" itemvalue="protobuf" />
-            <item index="3" class="java.lang.String" itemvalue="Babel" />
-            <item index="4" class="java.lang.String" itemvalue="PyYAML" />
-            <item index="5" class="java.lang.String" itemvalue="python-dateutil" />
-            <item index="6" class="java.lang.String" itemvalue="defusedxml" />
-            <item index="7" class="java.lang.String" itemvalue="marshmallow" />
-            <item index="8" class="java.lang.String" itemvalue="MarkupSafe" />
-            <item index="9" class="java.lang.String" itemvalue="pycparser" />
-            <item index="10" class="java.lang.String" itemvalue="apispec" />
-            <item index="11" class="java.lang.String" itemvalue="pyasn1-modules" />
-            <item index="12" class="java.lang.String" itemvalue="certifi" />
-            <item index="13" class="java.lang.String" itemvalue="oauthlib" />
-            <item index="14" class="java.lang.String" itemvalue="paypalhttp" />
-            <item index="15" class="java.lang.String" itemvalue="pyparsing" />
-            <item index="16" class="java.lang.String" itemvalue="prison" />
-            <item index="17" class="java.lang.String" itemvalue="jsonschema" />
-            <item index="18" class="java.lang.String" itemvalue="email-validator" />
-            <item index="19" class="java.lang.String" itemvalue="dnspython" />
-            <item index="20" class="java.lang.String" itemvalue="Werkzeug" />
-            <item index="21" class="java.lang.String" itemvalue="Flask-WTF" />
-            <item index="22" class="java.lang.String" itemvalue="cryptography" />
-            <item index="23" class="java.lang.String" itemvalue="click" />
-            <item index="24" class="java.lang.String" itemvalue="Flask-SQLAlchemy" />
-            <item index="25" class="java.lang.String" itemvalue="python3-openid" />
-            <item index="26" class="java.lang.String" itemvalue="attrs" />
-            <item index="27" class="java.lang.String" itemvalue="marshmallow-enum" />
-            <item index="28" class="java.lang.String" itemvalue="charset-normalizer" />
-            <item index="29" class="java.lang.String" itemvalue="PyMySQL" />
-            <item index="30" class="java.lang.String" itemvalue="Flask-Babel" />
-            <item index="31" class="java.lang.String" itemvalue="idna" />
-            <item index="32" class="java.lang.String" itemvalue="PyJWT" />
-            <item index="33" class="java.lang.String" itemvalue="rsa" />
-            <item index="34" class="java.lang.String" itemvalue="SQLAlchemy" />
-            <item index="35" class="java.lang.String" itemvalue="pyasn1" />
-            <item index="36" class="java.lang.String" itemvalue="requests" />
-            <item index="37" class="java.lang.String" itemvalue="paypal-checkout-serversdk" />
-            <item index="38" class="java.lang.String" itemvalue="Jinja2" />
-            <item index="39" class="java.lang.String" itemvalue="cloudinary" />
-            <item index="40" class="java.lang.String" itemvalue="Flask-Login" />
-            <item index="41" class="java.lang.String" itemvalue="pyrsistent" />
-            <item index="42" class="java.lang.String" itemvalue="Flask-Admin" />
-            <item index="43" class="java.lang.String" itemvalue="pyOpenSSL" />
-            <item index="44" class="java.lang.String" itemvalue="Flask-JWT-Extended" />
-            <item index="45" class="java.lang.String" itemvalue="SQLAlchemy-Utils" />
-            <item index="46" class="java.lang.String" itemvalue="urllib3" />
-            <item index="47" class="java.lang.String" itemvalue="itsdangerous" />
-            <item index="48" class="java.lang.String" itemvalue="Flask" />
-            <item index="49" class="java.lang.String" itemvalue="blinker" />
-            <item index="50" class="java.lang.String" itemvalue="Flask-OpenID" />
-            <item index="51" class="java.lang.String" itemvalue="uritemplate" />
-            <item index="52" class="java.lang.String" itemvalue="marshmallow-sqlalchemy" />
-            <item index="53" class="java.lang.String" itemvalue="six" />
-            <item index="54" class="java.lang.String" itemvalue="chardet" />
-            <item index="55" class="java.lang.String" itemvalue="WTForms" />
-            <item index="56" class="java.lang.String" itemvalue="colorama" />
-            <item index="57" class="java.lang.String" itemvalue="Flask-AppBuilder" />
-            <item index="58" class="java.lang.String" itemvalue="Flask-Mail" />
-            <item index="59" class="java.lang.String" itemvalue="cachetools" />
-            <item index="60" class="java.lang.String" itemvalue="pytz" />
-            <item index="61" class="java.lang.String" itemvalue="typing_extensions" />
-          </list>
-        </value>
-      </option>
-    </inspection_tool>
-  </profile>
-</component>
\ No newline at end of file
Index: trainingpointAPI/trainingpoint/admin.py
===================================================================
diff --git a/trainingpointAPI/trainingpoint/admin.py b/trainingpointAPI/trainingpoint/admin.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpoint/admin.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,32 +0,0 @@
-from django.contrib import admin
-from django.utils.safestring import mark_safe
-from trainingpoint.models import *
-from ckeditor_uploader.widgets import CKEditorUploadingWidget
-
-
-
-
-class TaiKhoanAdmin(admin.ModelAdmin):
-    readonly_fields = ['my_avatar']
-
-
-
-    def my_avatar(self, taikhoan):
-        if taikhoan.avatar:
-            return mark_safe(f"<img width='200' src='{taikhoan.avatar.url}' />")
-
-
-admin.site.register(TaiKhoan)
-admin.site.register(Khoa)
-admin.site.register(Lop)
-admin.site.register(TroLySinhVien_Khoa)
-admin.site.register(SinhVien)
-admin.site.register(HocKy_NamHoc)
-admin.site.register(Dieu)
-admin.site.register(HoatDongNgoaiKhoa)
-admin.site.register(ThamGia)
-admin.site.register(MinhChung)
-admin.site.register(BaiViet)
-admin.site.register(Comment)
-admin.site.register(Like)
-admin.site.register(DiemRenLuyen)
Index: trainingpointAPI/.idea/inspectionProfiles/profiles_settings.xml
===================================================================
diff --git a/trainingpointAPI/.idea/inspectionProfiles/profiles_settings.xml b/trainingpointAPI/.idea/inspectionProfiles/profiles_settings.xml
deleted file mode 100644
--- a/trainingpointAPI/.idea/inspectionProfiles/profiles_settings.xml	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,6 +0,0 @@
-<component name="InspectionProjectProfileManager">
-  <settings>
-    <option name="USE_PROJECT_PROFILE" value="false" />
-    <version value="1.0" />
-  </settings>
-</component>
\ No newline at end of file
Index: trainingpointAPI/trainingpointAPI/urls.py
===================================================================
diff --git a/trainingpointAPI/trainingpointAPI/urls.py b/trainingpointAPI/trainingpointAPI/urls.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpointAPI/urls.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,51 +0,0 @@
-"""
-URL configuration for trainingpointappp project.
-
-The `urlpatterns` list routes URLs to views. For more information please see:
-    https://docs.djangoproject.com/en/5.0/topics/http/urls/
-Examples:
-Function views
-    1. Add an import:  from my_app import views
-    2. Add a URL to urlpatterns:  path('', views.home, name='home')
-Class-based views
-    1. Add an import:  from other_app.views import Home
-    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
-Including another URLconf
-    1. Import the include() function: from django.urls import include, path
-    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
-"""
-from django.contrib import admin
-from django.urls import path, include, re_path
-
-from rest_framework import permissions
-from drf_yasg.views import get_schema_view
-from drf_yasg import openapi
-
-schema_view = get_schema_view(
-    openapi.Info(
-        title="Training point API",
-        default_version='v1',
-        description="APIs for Training point app",
-        contact=openapi.Contact(email=""),
-        license=openapi.License(name=""),
-    ),
-    public=True,
-    permission_classes=(permissions.AllowAny,),
-)
-
-urlpatterns = [
-    path('', include('trainingpoint.urls')),
-
-    path('admin/', admin.site.urls),
-    re_path(r'^ckeditor/', include('ckeditor_uploader.urls')),
-    re_path(r'^swagger(?P<format>\.json|\.yaml)$',
-            schema_view.without_ui(cache_timeout=0),
-            name='schema-json'),
-    re_path(r'^swagger/$',
-            schema_view.with_ui('swagger', cache_timeout=0),
-            name='schema-swagger-ui'),
-    re_path(r'^redoc/$',
-            schema_view.with_ui('redoc', cache_timeout=0),
-            name='schema-redoc'),
-    path('o/', include('oauth2_provider.urls', namespace='oauth2_provider')),
-]
Index: trainingpointAPI/trainingpoint/migrations/0002_alter_diemrenluyen_xep_loai_and_more.py
===================================================================
diff --git a/trainingpointAPI/trainingpoint/migrations/0002_alter_diemrenluyen_xep_loai_and_more.py b/trainingpointAPI/trainingpoint/migrations/0002_alter_diemrenluyen_xep_loai_and_more.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpoint/migrations/0002_alter_diemrenluyen_xep_loai_and_more.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,23 +0,0 @@
-# Generated by Django 5.0.6 on 2024-06-07 11:04
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('trainingpoint', '0001_initial'),
-    ]
-
-    operations = [
-        migrations.AlterField(
-            model_name='diemrenluyen',
-            name='xep_loai',
-            field=models.IntegerField(choices=[(1, 'Xuất Sắc'), (2, 'Giỏi'), (3, 'Khá'), (4, 'Trung Bình'), (5, 'Yếu'), (6, 'Kém')], editable=False),
-        ),
-        migrations.AlterField(
-            model_name='thamgia',
-            name='ngay_diem_danh',
-            field=models.DateTimeField(default=None, null=True),
-        ),
-    ]
Index: trainingpointAPI/trainingpoint/migrations/0005_sinhvien_active_sinhvien_created_date_and_more.py
===================================================================
diff --git a/trainingpointAPI/trainingpoint/migrations/0005_sinhvien_active_sinhvien_created_date_and_more.py b/trainingpointAPI/trainingpoint/migrations/0005_sinhvien_active_sinhvien_created_date_and_more.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpoint/migrations/0005_sinhvien_active_sinhvien_created_date_and_more.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,30 +0,0 @@
-# Generated by Django 5.0.6 on 2024-06-12 17:31
-
-import django.utils.timezone
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('trainingpoint', '0004_hoatdongngoaikhoa_tro_ly'),
-    ]
-
-    operations = [
-        migrations.AddField(
-            model_name='sinhvien',
-            name='active',
-            field=models.BooleanField(default=True),
-        ),
-        migrations.AddField(
-            model_name='sinhvien',
-            name='created_date',
-            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
-            preserve_default=False,
-        ),
-        migrations.AddField(
-            model_name='sinhvien',
-            name='updated_date',
-            field=models.DateTimeField(auto_now=True),
-        ),
-    ]
Index: trainingpointAPI/trainingpoint/migrations/0008_remove_baiviet_tags_delete_tag.py
===================================================================
diff --git a/trainingpointAPI/trainingpoint/migrations/0008_remove_baiviet_tags_delete_tag.py b/trainingpointAPI/trainingpoint/migrations/0008_remove_baiviet_tags_delete_tag.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpoint/migrations/0008_remove_baiviet_tags_delete_tag.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,20 +0,0 @@
-# Generated by Django 5.0.6 on 2024-06-13 10:25
-
-from django.db import migrations
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('trainingpoint', '0007_baiviet_tags'),
-    ]
-
-    operations = [
-        migrations.RemoveField(
-            model_name='baiviet',
-            name='tags',
-        ),
-        migrations.DeleteModel(
-            name='Tag',
-        ),
-    ]
Index: trainingpointAPI/trainingpoint/tests.py
===================================================================
diff --git a/trainingpointAPI/trainingpoint/tests.py b/trainingpointAPI/trainingpoint/tests.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpoint/tests.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,3 +0,0 @@
-from django.test import TestCase
-
-# Create your tests here.
Index: trainingpointAPI/manage.py
===================================================================
diff --git a/trainingpointAPI/manage.py b/trainingpointAPI/manage.py
deleted file mode 100644
--- a/trainingpointAPI/manage.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,22 +0,0 @@
-#!/usr/bin/env python
-"""Django's command-line utility for administrative tasks."""
-import os
-import sys
-
-
-def main():
-    """Run administrative tasks."""
-    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'trainingpointAPI.settings')
-    try:
-        from django.core.management import execute_from_command_line
-    except ImportError as exc:
-        raise ImportError(
-            "Couldn't import Django. Are you sure it's installed and "
-            "available on your PYTHONPATH environment variable? Did you "
-            "forget to activate a virtual environment?"
-        ) from exc
-    execute_from_command_line(sys.argv)
-
-
-if __name__ == '__main__':
-    main()
Index: trainingpointAPI/.idea/misc.xml
===================================================================
diff --git a/trainingpointAPI/.idea/misc.xml b/trainingpointAPI/.idea/misc.xml
deleted file mode 100644
--- a/trainingpointAPI/.idea/misc.xml	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Black">
-    <option name="sdkName" value="Python 3.12 (trainingpointAPI) (3)" />
-  </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12 (trainingpointAPI) (3)" project-jdk-type="Python SDK" />
-</project>
\ No newline at end of file
Index: trainingpointAPI/trainingpointAPI/settings.py
===================================================================
diff --git a/trainingpointAPI/trainingpointAPI/settings.py b/trainingpointAPI/trainingpointAPI/settings.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpointAPI/settings.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,174 +0,0 @@
-import os
-from pathlib import Path
-import pymysql
-
-pymysql.install_as_MySQLdb()
-# Build paths inside the project like this: BASE_DIR / 'subdir'.
-BASE_DIR = Path(__file__).resolve().parent.parent
-MEDIA_ROOT = '%s/trainingpoint/static/' % BASE_DIR
-
-# Quick-start development settings - unsuitable for production
-# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/
-
-# SECURITY WARNING: keep the secret key used in production secret!
-SECRET_KEY = 'django-insecure-3g%$w&of#)smi#wfjx**j+9tq0k9!0fs_lxq-2ofp++kfv&sx2'
-
-# SECURITY WARNING: don't run with debug turned on in production!
-DEBUG = True
-
-ALLOWED_HOSTS = ['192.168.1.218','localhost']
-
-import cloudinary
-
-cloudinary.config(
-    cloud_name="sonpnts",
-    api_key="752187729553174",
-    api_secret="LPw7aj9WseIgRmVct7bdppxfa5g",
-    # api_proxy="http://proxy.server:8081/"
-)
-
-# Application definition
-
-INSTALLED_APPS = [
-    'django.contrib.admin',
-    'django.contrib.auth',
-    'django.contrib.contenttypes',
-    'django.contrib.sessions',
-    'django.contrib.messages',
-    'django.contrib.staticfiles',
-    'django.contrib.sites',
-    'trainingpoint.apps.TrainingpointConfig',
-    'ckeditor',
-    'ckeditor_uploader',
-    'rest_framework',
-    'oauth2_provider',
-    'cloudinary',
-    'drf_yasg',
-'corsheaders',
-]
-
-CKEDITOR_UPLOAD_PATH = "ckeditors/images"
-
-AUTH_USER_MODEL = 'trainingpoint.TaiKhoan'
-
-MIDDLEWARE = [
-    'django.middleware.security.SecurityMiddleware',
-    'django.contrib.sessions.middleware.SessionMiddleware',
-    'django.middleware.common.CommonMiddleware',
-    'django.middleware.csrf.CsrfViewMiddleware',
-    'django.contrib.auth.middleware.AuthenticationMiddleware',
-    'django.contrib.messages.middleware.MessageMiddleware',
-    'django.middleware.clickjacking.XFrameOptionsMiddleware',
-    'corsheaders.middleware.CorsMiddleware',
-
-]
-
-CORS_ORIGIN_ALLOW_ALL = True  # Cho phép tất cả các nguồn gốc
-
-ROOT_URLCONF = 'trainingpointAPI.urls'
-
-TEMPLATES = [
-    {
-        'BACKEND': 'django.template.backends.django.DjangoTemplates',
-        'DIRS': [BASE_DIR / 'templates']
-        ,
-        'APP_DIRS': True,
-        'OPTIONS': {
-            'context_processors': [
-                'django.template.context_processors.debug',
-                'django.template.context_processors.request',
-                'django.contrib.auth.context_processors.auth',
-                'django.contrib.messages.context_processors.messages',
-
-            ],
-        },
-    },
-]
-REST_FRAMEWORK = {
-    'DEFAULT_AUTHENTICATION_CLASSES': (
-        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
-    )
-}
-
-WSGI_APPLICATION = 'trainingpointAPI.wsgi.application'
-
-# Database
-# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
-
-DATABASES = {
-    'default': {
-        'ENGINE': 'django.db.backends.mysql',
-        'NAME': 'trainingpointdb',
-        'USER': 'root',
-        # 'PASSWORD': 'Nhatcuong123@',  #mk mysql
-        'PASSWORD': 'Son1010@',  # mk mysql
-        'HOST': ''  # mặc định localhost
-    }
-}
-SITE_ID=1
-
-AUTH_PASSWORD_VALIDATORS = [
-    {
-        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
-    },
-    {
-        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
-    },
-    {
-        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
-    },
-    {
-        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
-    },
-]
-
-# Internationalization
-# https://docs.djangoproject.com/en/5.0/topics/i18n/
-
-LANGUAGE_CODE = 'en-us'
-
-TIME_ZONE = 'UTC'
-
-USE_I18N = True
-
-USE_TZ = True
-
-# Static files (CSS, JavaScript, Images)
-# https://docs.djangoproject.com/en/5.0/howto/static-files/
-
-STATIC_URL = 'static/'
-
-# Default primary key field type
-# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
-
-DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
-
-EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
-EMAIL_HOST = 'smtp.gmail.com'
-EMAIL_PORT = 587
-EMAIL_USE_TLS = True
-EMAIL_HOST_USER = 'phamngoctruongson2003@gmail.com'  # Thay bằng email của bạn
-EMAIL_HOST_PASSWORD = 'twefshdqocjlrxkh'  # Thay bằng mật khẩu của bạn
-
-CLIENT_ID = '95720794006-utnmng1hghrq7df9s5386e1dbstbsb33.apps.googleusercontent.com'
-CLIENT_SECRET = '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'
-
-client_id: "nBF09WIbpiMhXA0AC1CyUtmZ4UrapK9C2T73CM8v"
-client_secret: "flUMi37JgPmzr3rQMqbpRozri4lVdhzJ33ffXAl47cVoJqnShG8gfPCuTVvPsGFmYstjovkzTG9yY2IFGxWlGD2I0Q0f5yxx5NEYMgfGtdnxDHaEhd60MU43cQlV6kyx"
-
-
-# FIREBASE_ADMIN_PATH = os.path.join(BASE_DIR, 'trainingpoint/firebase/qldrl-77e59-firebase-adminsdk-6tt21-9c80f40850.json')
-
-
-import firebase_admin
-from firebase_admin import credentials
-firebase_credentials_path = os.path.join(BASE_DIR, 'trainingpoint/firebase/qldrl-77e59-firebase-adminsdk-6tt21-9c80f40850.json')
-
-
-if not firebase_credentials_path:
-    raise ValueError('Missing FIREBASE_ADMINSDK_JSON environment variable.')
-
-# Khởi tạo Firebase Admin SDK với tệp JSON khóa dịch vụ
-cred = credentials.Certificate(firebase_credentials_path)
-firebase_admin.initialize_app(cred)
-
Index: trainingpointAPI/.idea/dataSources.xml
===================================================================
diff --git a/trainingpointAPI/.idea/dataSources.xml b/trainingpointAPI/.idea/dataSources.xml
deleted file mode 100644
--- a/trainingpointAPI/.idea/dataSources.xml	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="DataSourceManagerImpl" format="xml" multifile-model="true">
-    <data-source source="LOCAL" name="Django default" uuid="2a44cf33-11e1-42b8-9d8c-b4f406d695bd">
-      <driver-ref>mysql.8</driver-ref>
-      <synchronize>true</synchronize>
-      <imported>true</imported>
-      <remarks>$PROJECT_DIR$/trainingpointAPI/settings.py</remarks>
-      <jdbc-driver>com.mysql.cj.jdbc.Driver</jdbc-driver>
-      <jdbc-url>jdbc:mysql://localhost:3306/trainingpointdb</jdbc-url>
-      <working-dir>$ProjectFileDir$</working-dir>
-    </data-source>
-    <data-source source="LOCAL" name="trainingpointdb@localhost" uuid="89570854-c68c-41bc-ad46-588a4cedb6f9">
-      <driver-ref>mysql.8</driver-ref>
-      <synchronize>true</synchronize>
-      <jdbc-driver>com.mysql.cj.jdbc.Driver</jdbc-driver>
-      <jdbc-url>jdbc:mysql://localhost:3306/trainingpointdb</jdbc-url>
-      <working-dir>$ProjectFileDir$</working-dir>
-    </data-source>
-  </component>
-</project>
\ No newline at end of file
Index: trainingpointAPI/.idea/trainingpointAPI.iml
===================================================================
diff --git a/trainingpointAPI/.idea/trainingpointAPI.iml b/trainingpointAPI/.idea/trainingpointAPI.iml
deleted file mode 100644
--- a/trainingpointAPI/.idea/trainingpointAPI.iml	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,30 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="PYTHON_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="django" name="Django">
-      <configuration>
-        <option name="rootFolder" value="$MODULE_DIR$" />
-        <option name="settingsModule" value="trainingpointAPI/settings.py" />
-        <option name="manageScript" value="$MODULE_DIR$/manage.py" />
-        <option name="environment" value="&lt;map/&gt;" />
-        <option name="doNotUseTestRunner" value="false" />
-        <option name="trackFilePattern" value="migrations" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$">
-      <excludeFolder url="file://$MODULE_DIR$/.venv" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-  <component name="TemplatesService">
-    <option name="TEMPLATE_CONFIGURATION" value="Django" />
-    <option name="TEMPLATE_FOLDERS">
-      <list>
-        <option value="$MODULE_DIR$/../trainingpointAPI\templates" />
-      </list>
-    </option>
-  </component>
-</module>
\ No newline at end of file
Index: trainingpointAPI/trainingpoint/migrations/0006_remove_baiviet_tags.py
===================================================================
diff --git a/trainingpointAPI/trainingpoint/migrations/0006_remove_baiviet_tags.py b/trainingpointAPI/trainingpoint/migrations/0006_remove_baiviet_tags.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpoint/migrations/0006_remove_baiviet_tags.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,17 +0,0 @@
-# Generated by Django 5.0.6 on 2024-06-13 09:57
-
-from django.db import migrations
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('trainingpoint', '0005_sinhvien_active_sinhvien_created_date_and_more'),
-    ]
-
-    operations = [
-        migrations.RemoveField(
-            model_name='baiviet',
-            name='tags',
-        ),
-    ]
Index: trainingpointAPI/.idea/vcs.xml
===================================================================
diff --git a/trainingpointAPI/.idea/vcs.xml b/trainingpointAPI/.idea/vcs.xml
deleted file mode 100644
--- a/trainingpointAPI/.idea/vcs.xml	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
-  </component>
-</project>
\ No newline at end of file
Index: trainingpointAPI/trainingpoint/urls.py
===================================================================
diff --git a/trainingpointAPI/trainingpoint/urls.py b/trainingpointAPI/trainingpoint/urls.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpoint/urls.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,31 +0,0 @@
-from django.contrib import admin
-from django.urls import path, re_path, include
-from rest_framework import routers
-from trainingpoint import views
-from trainingpoint import send_mail
-r = routers.DefaultRouter()
-
-r.register('khoas', views.KhoaViewSet, basename='Khoa')
-r.register('lops', views.LopViewSet, basename='Lớp')
-r.register('taikhoans', views.TaiKhoanViewSet, basename='Tài Khoản')
-r.register('sinhviens', views.SinhVienViewSet, basename='Sinh Viên')
-r.register('dieus', views.DieuViewSet, basename='Điều')
-r.register('hoatdongs', views.HoatDongNgoaiKhoaViewSet, basename='Hoạt Động Ngoại Khóa')
-r.register('baiviets', views.BaiVietViewSet, basename="Bài Viết")
-r.register('comments', views.CommentViewset, basename="Comment")
-r.register('diemrenluyens', views.DiemRenLuyenViewset, basename='Điểm Rèn Luyện')
-r.register('thamgias', views.ThamGiaViewSet, basename='Tham Gia')
-r.register('minhchungs', views.MinhChungViewSet, basename='Minh Chứng')
-r.register('send_mail', send_mail.SendEmailViewSet, basename='send_mail')
-r.register('hockinamhocs', views.HocKyNamHocViewset, basename='hockinamhocs')
-r.register('trolysinhviens', views.TroLySinhVienKhoaViewset, basename='TroLySinhViens')
-urlpatterns = [
-    path('bao-cao-lop/<int:id_lop>/<int:id_hoc_ky>/<int:id_format>/', views.ExportBaoCaoViewLop.as_view(), name='Báo cáo theo lớp xuất file'),
-    path('bao-cao-khoa/<int:id_khoa>/<int:id_hoc_ky>/<int:id_format>/', views.ExportBaoCaoViewKhoa.as_view(), name='Báo cáo theo khoa xuất file'),
-    path('bao-cao-chi-tiet/<int:sinh_vien_id>/<int:hoc_ky_id>/<int:id_format>/', views.BaoCaoChiTietSinhVien.as_view(), name='Báo cáo chi tiết sinh viên xuất file'),
-    path('thong-ke-lop/<int:id_lop>/<int:id_hoc_ky>/', views.BaoCaoViewLop.as_view(), name='Thống kê theo lớp'),
-    path('thong-ke-khoa/<int:id_khoa>/<int:id_hoc_ky>/', views.BaoCaoViewKhoa.as_view(), name='Thống kê theo khoa'),
-    path('upload-diem-danh/<int:hd_ngoaikhoa_id>/<int:hk_id>/', views.UploadFileDiemDanh.as_view(), name='Upload điểm danh'),
-
-    path('', include(r.urls))
-]
Index: trainingpointAPI/trainingpoint/models.py
===================================================================
diff --git a/trainingpointAPI/trainingpoint/models.py b/trainingpointAPI/trainingpoint/models.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpoint/models.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,187 +0,0 @@
-from django.db import models
-from django.contrib.auth.models import AbstractUser
-from ckeditor.fields import RichTextField
-from cloudinary.models import CloudinaryField
-
-
-class TaiKhoan(AbstractUser):
-    avatar = CloudinaryField(null=True)
-
-    class Roles(models.IntegerChoices):
-        ADMIN = 1, 'Admin'
-        CongTacSinhVien = 2, 'Cộng Tác Sinh Viên'
-        TroLySinhVien = 3, 'Trợ Lý Sinh Viên'
-        SinhVien = 4, 'Sinh Viên'
-
-    role = models.IntegerField(choices=Roles.choices, null=True)
-
-    def __str__(self):
-        return self.username
-
-
-class BaseModel(models.Model):
-    created_date = models.DateTimeField(auto_now_add=True)
-    updated_date = models.DateTimeField(auto_now=True)
-    active = models.BooleanField(default=True)
-
-    class Meta:
-        abstract = True
-
-
-class Khoa(BaseModel):
-    ten_khoa = models.CharField(max_length=255)
-
-    def __str__(self):
-        return self.ten_khoa
-
-
-class Lop(BaseModel):
-    ten_lop = models.CharField(max_length=255)
-    khoa = models.ForeignKey(Khoa, on_delete=models.PROTECT)
-
-    def __str__(self):
-        return self.ten_lop
-
-
-class TroLySinhVien_Khoa(BaseModel):
-    trolySV = models.ForeignKey(TaiKhoan, on_delete=models.CASCADE, limit_choices_to={'role': TaiKhoan.Roles.TroLySinhVien})
-    khoa = models.ForeignKey(Khoa, on_delete=models.PROTECT)
-
-
-class SinhVien(BaseModel):
-    mssv = models.CharField(max_length=10, unique=True)
-    ho_ten = models.CharField(max_length=255)
-    ngay_sinh = models.DateField()
-
-    class GioiTinh(models.IntegerChoices):
-        NAM = 1, 'Nam'
-        NU = 2, 'Nữ'
-
-    gioi_tinh = models.IntegerField(choices=GioiTinh)
-    email = models.EmailField(null=False, unique=True)
-    dia_chi = models.TextField()
-    lop = models.ForeignKey(Lop, on_delete=models.CASCADE)
-
-    def __str__(self):
-        return self.ho_ten
-
-
-class HocKy_NamHoc(BaseModel):
-    class Meta:
-        unique_together = ('hoc_ky', 'nam_hoc')
-
-    class HocKy(models.IntegerChoices):
-        MOT = 1, 'Một'
-        HAI = 2, 'Hai'
-        BA = 3, 'Ba'
-
-    hoc_ky = models.IntegerField(choices=HocKy.choices)
-    nam_hoc = models.CharField(max_length=9)
-
-    def __str__(self):
-        return f"{self.hoc_ky} - {self.nam_hoc}"
-
-
-class Dieu(BaseModel):
-    ma_dieu = models.CharField(max_length=10, unique=True)
-    ten_dieu = models.CharField(max_length=255)
-    diem_toi_da = models.IntegerField()
-    def __str__(self):
-        return self.ten_dieu
-
-
-class HoatDongNgoaiKhoa(BaseModel):
-    ten_HD_NgoaiKhoa = models.TextField()
-    ngay_to_chuc = models.DateTimeField()
-    thong_tin = RichTextField(null=True)
-    diem_ren_luyen = models.IntegerField(default=5)
-    dieu = models.ForeignKey(Dieu, on_delete=models.SET_DEFAULT, default=1)
-    hk_nh = models.ForeignKey(HocKy_NamHoc, on_delete=models.SET_NULL, null=True)
-    sinh_vien = models.ManyToManyField(SinhVien, through='ThamGia')
-    tro_ly = models.ForeignKey(TaiKhoan, on_delete=models.PROTECT,
-                               limit_choices_to={'role': TaiKhoan.Roles.TroLySinhVien})
-    def __str__(self):
-        return self.ten_HD_NgoaiKhoa
-
-
-class ThamGia(models.Model):
-    sinh_vien = models.ForeignKey(SinhVien, on_delete=models.CASCADE)
-    hd_ngoaikhoa = models.ForeignKey(HoatDongNgoaiKhoa, on_delete=models.CASCADE)
-
-    class TrangThai(models.IntegerChoices):
-        DangKy = 0, 'Đăng Ký'
-        DiemDanh = 1, 'Điểm Danh'
-        BaoThieu = 2, 'Báo Thiếu'
-        KhongHopLy= 3, 'Không Hợp Lý'
-
-    trang_thai = models.IntegerField(choices=TrangThai, null=True)
-    ngay_dang_ky = models.DateTimeField(auto_now_add=True)
-    ngay_diem_danh = models.DateTimeField(default=None, null=True)
-
-    def __str__(self):
-        return f"{self.sinh_vien.mssv} - {self.hd_ngoaikhoa.ten_HD_NgoaiKhoa}"
-
-
-class MinhChung(BaseModel):
-    description = RichTextField()
-    anh_minh_chung = CloudinaryField()
-    tham_gia = models.ForeignKey(ThamGia, on_delete=models.CASCADE)
-    phan_hoi = RichTextField(null=True)
-
-class BaiViet(BaseModel):
-    title = models.CharField(max_length=255)
-    content = RichTextField(null=True)
-    image = CloudinaryField()
-    tro_ly = models.ForeignKey(TaiKhoan, on_delete=models.PROTECT, limit_choices_to={'role': TaiKhoan.Roles.TroLySinhVien})
-    hd_ngoaikhoa = models.ForeignKey(HoatDongNgoaiKhoa, on_delete=models.CASCADE)
-
-    def __str__(self):
-        return self.title
-
-
-class Interaction(BaseModel):
-    tai_khoan = models.ForeignKey(TaiKhoan, on_delete=models.CASCADE)
-    bai_viet = models.ForeignKey(BaiViet, on_delete=models.CASCADE)
-
-    class Meta:
-        abstract = True
-
-class Comment(Interaction):
-    content = models.CharField(max_length=255)
-
-
-class Like(Interaction):
-    class Meta:
-        unique_together = ('bai_viet', 'tai_khoan')
-
-
-class DiemRenLuyen(BaseModel):
-    sinh_vien = models.ForeignKey(SinhVien, on_delete=models.CASCADE)
-    hk_nh = models.ForeignKey(HocKy_NamHoc, on_delete=models.CASCADE)
-    diem_tong = models.IntegerField()
-
-    class XepLoai(models.IntegerChoices):
-        XUATSAC = 1, 'Xuất Sắc'
-        GIOI = 2, 'Giỏi'
-        KHA = 3, 'Khá'
-        TB = 4, 'Trung Bình'
-        YEU = 5, 'Yếu'
-        KEM = 6, 'Kém'
-
-    xep_loai = models.IntegerField(choices=XepLoai.choices, editable=False)
-
-    def save(self, *args, **kwargs):
-        if 90 <= self.diem_tong <= 100:
-            self.xep_loai = self.XepLoai.XUATSAC
-        elif 80 <= self.diem_tong < 90:
-            self.xep_loai = self.XepLoai.GIOI
-        elif 65 <= self.diem_tong < 80:
-            self.xep_loai = self.XepLoai.KHA
-        elif 50 <= self.diem_tong < 65:
-            self.xep_loai = self.XepLoai.TB
-        elif 35 <= self.diem_tong < 50:
-            self.xep_loai = self.XepLoai.YEU
-        else:
-            self.xep_loai = self.XepLoai.KEM
-
-        super().save(*args, **kwargs)
\ No newline at end of file
Index: trainingpointAPI/trainingpoint/views.py
===================================================================
diff --git a/trainingpointAPI/trainingpoint/views.py b/trainingpointAPI/trainingpoint/views.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpoint/views.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,1405 +0,0 @@
-import csv
-from io import BytesIO
-from datetime import datetime
-from django.utils import timezone
-from django.core.exceptions import ObjectDoesNotExist
-from rest_framework.mixins import UpdateModelMixin
-from unidecode import unidecode
-from django.http import HttpResponse, JsonResponse
-from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
-from rest_framework import viewsets, generics, status, parsers, permissions, exceptions
-from rest_framework.decorators import action
-from rest_framework.response import Response
-from rest_framework.permissions import IsAuthenticated
-from trainingpoint.models import *
-from trainingpoint import serializers, paginators
-from django.contrib.auth.models import AnonymousUser
-from rest_framework.views import APIView
-from reportlab.lib.pagesizes import letter
-from reportlab.pdfbase.ttfonts import TTFont
-from reportlab.pdfbase import pdfmetrics
-from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Frame
-from reportlab.lib import colors
-from firebase_admin import auth as firebase_auth
-
-
-
-class BaiVietViewSet(viewsets.ViewSet, generics.ListCreateAPIView):
-    queryset = BaiViet.objects.filter(active=True)
-    serializer_class = serializers.BaiVietSerializer
-    pagination_class = paginators.BaiVietPaginator
-    def get_permissions(self):
-        if self.action in ['add_comment', 'like']:
-            return [permissions.IsAuthenticated()]
-        else:
-            if self.action in ['create', 'update', 'partial_update', 'destroy']:
-                if isinstance(self.request.user, AnonymousUser):
-                    return [permissions.IsAuthenticated()]
-                else:
-                    if (self.request.user.is_authenticated and
-                            self.request.user.role in [TaiKhoan.Roles.TroLySinhVien.value,
-                                                       TaiKhoan.Roles.CongTacSinhVien.value]):
-                        return [permissions.IsAuthenticated()]
-                    else:
-                        raise exceptions.PermissionDenied()
-
-        return [permissions.AllowAny()]
-
-
-
-    def get_queryset(self):
-        queries = self.queryset
-        q = self.request.query_params.get("q")
-        if q:
-            queries = queries.filter(title__icontains=q)
-
-        return queries
-
-    @action(methods=['get'], url_path="comments", detail=True)
-    def get_comments(self, request, pk):
-        comments = Comment.objects.filter(bai_viet=pk).order_by('-created_date')
-        paginator = paginators.CommentPaginator()
-        page = paginator.paginate_queryset(comments, request)
-        if page is not None:
-            serializer = serializers.CommentSerializer(page, many=True)
-            return paginator.get_paginated_response(serializer.data)
-
-        return Response(serializers.CommentSerializer(comments, many=True).data,
-                        status=status.HTTP_200_OK)
-
-    @action(methods=['post'], url_path="comment", detail=True)
-    def add_comment(self, request, pk):
-        c = Comment.objects.create(tai_khoan=request.user, bai_viet=self.get_object(), content=request.data.get('content'))
-
-        return Response(serializers.CommentSerializer(c).data, status=status.HTTP_201_CREATED)
-
-    @action(methods=['post'], url_path='like', detail=True)
-    def like(self, request, pk):
-        li, created = Like.objects.get_or_create(bai_viet=self.get_object(), tai_khoan=request.user)
-
-        if not created:
-            li.active = not li.active
-            li.save()
-
-        return Response(
-            serializers.AuthenticatedBaiVietTagSerializer(self.get_object(), context={'request': request}).data, status=status.HTTP_201_CREATED)
-
-    @action(methods=['get'], detail=True, url_path='liked')
-    def check_like_status(self, request, pk=None):
-        bai_viet = self.get_object()
-        user = request.user
-        liked = Like.objects.filter(bai_viet=bai_viet, tai_khoan=user, active=1).exists()
-        if not liked:
-            return Response({'liked': False}, status=status.HTTP_200_OK)
-        return Response({'liked': True }, status=status.HTTP_200_OK)
-
-
-    @action(methods=['get'], url_path='tac_gia', detail=True)
-    def get_tacgia(self, request, pk):
-        baiviet = self.get_object()
-        tacgia = TaiKhoan.objects.get(id=baiviet.tro_ly.id)
-        return Response(serializers.TaiKhoanSerializer(tacgia).data, status=status.HTTP_200_OK)
-
-
-
-class DieuViewSet(viewsets.ViewSet, generics.ListAPIView):
-    queryset = Dieu.objects.filter(active=True)
-    serializer_class = serializers.DieuSerializer
-
-    def get_permissions(self):
-        if self.action in ['create', 'update', 'partial_update']:
-            if isinstance(self.request.user, AnonymousUser):
-                return [permissions.IsAuthenticated()]
-            else:
-                if (self.request.user.is_authenticated and
-                        (self.request.user.role in [TaiKhoan.Roles.ADMIN,
-                                                    TaiKhoan.Roles.TroLySinhVien])):
-                    return [permissions.IsAuthenticated()]
-                else:
-                    raise exceptions.PermissionDenied()
-        return [permissions.AllowAny()]
-
-    def get_queryset(self):
-        queryset = self.queryset
-        q = self.request.query_params.get('ten_dieu')
-        if q:
-            queryset = queryset.filter(ten_dieu__icontains=q)
-        ma_dieu = self.request.query_params.get('ma_dieu')
-        if ma_dieu:
-            queryset = queryset.filter(ma_dieu=ma_dieu)
-
-        return queryset
-
-    @action(methods=['get'], url_path='hoatdongs', detail=True)
-    def get_hoatdongs(self, request, pk):
-        dieu = Dieu.objects.prefetch_related('hoatdongngoaikhoa_set').get(id=pk)
-        hoatdongngoaikhoas = dieu.hoatdongngoaikhoa_set.all()
-        q = self.request.query_params.get('ten_HD_NgoaiKhoa')
-        if q:
-            hoatdongngoaikhoas = hoatdongngoaikhoas.filter(ten_HD_NgoaiKhoa__icontains=q)
-        return Response(serializers.HoatDongNgoaiKhoaSerializer(hoatdongngoaikhoas, many=True).data,
-                        status=status.HTTP_200_OK)
-
-
-class CommentViewset(viewsets.ViewSet):
-    queryset = Comment.objects.all()
-    serializer_class = serializers.CommentSerializer
-
-    @action(methods=['get'], url_path='tac_gia', detail=True)
-    def get_tac_gia(self, request, pk):
-        comment = self.queryset.get(pk=pk)
-        tacgia = comment.tai_khoan
-        return Response(serializers.TaiKhoanSerializer(tacgia).data, status=status.HTTP_200_OK)
-
-
-class DiemRenLuyenViewset(viewsets.ViewSet, generics.ListCreateAPIView):
-    queryset = DiemRenLuyen.objects.all()
-    serializer_class = serializers.DiemRenLuyenSerializer
-
-    def get_permissions(self):
-        if self.action in ['create', 'update', 'partial_update', 'destroy']:
-            if isinstance(self.request.user, AnonymousUser):
-                return [permissions.IsAuthenticated()]
-            else:
-                if (self.request.user.is_authenticated and
-                        self.request.user.role in [TaiKhoan.Roles.CongTacSinhVien,
-                                                   TaiKhoan.Roles.TroLySinhVien,
-                                                   TaiKhoan.Roles.ADMIN]):
-                    return [permissions.IsAuthenticated()]
-                else:
-                    raise exceptions.PermissionDenied()
-
-        return [permissions.AllowAny()]
-
-
-    def get_queryset(self):
-        queryset = self.queryset
-        diem = self.request.query_params.get("diem")
-        if diem:
-            queryset = queryset.filter(diem_tong__icontains=diem)
-
-        sv_id = self.request.query_params.get("sv_id")
-        if sv_id:
-            queryset = queryset.filter(sinh_vien__icontains=sv_id)
-
-        sv_name = self.request.query_params.get("sv_name")
-        if sv_name:
-            sv_ids = SinhVien.objects.filter(ho_ten__icontains=sv_name).values_list('id', flat=True)
-            queryset = queryset.filter(sinh_vien__in=sv_ids)
-
-        hk = self.request.query_params.get("hk")
-        if hk:
-            hk_ids = HocKy_NamHoc.objects.filter(hoc_ky=hk).values_list('id', flat=True)
-            queryset = queryset.filter(hk_nh__in=hk_ids)
-
-        nh = self.request.query_params.get("nh")
-        if nh:
-            nh_ids = HocKy_NamHoc.objects.filter(nam_hoc__icontains=nh).values_list('id', flat=True)
-            queryset = queryset.filter(hk_nh__in=nh_ids)
-
-        return queryset
-
-    @action(detail=False, methods=['post'], url_path=r'calculate/(?P<id_sinh_vien>\d+)/(?P<id_hoc_ky>\d+)')
-    def calculate_diem_ren_luyen(self, request, id_sinh_vien, id_hoc_ky):
-        try:
-            sinh_vien = SinhVien.objects.get(id=id_sinh_vien)
-            hoat_dong_tham_gia = ThamGia.objects.filter(
-                sinh_vien=sinh_vien,
-                hd_ngoaikhoa__hk_nh_id=id_hoc_ky,
-                trang_thai=ThamGia.TrangThai.DiemDanh
-            )
-
-            diem_ren_luyen = 0
-            dieu_points = {}
-
-            for tham_gia in hoat_dong_tham_gia:
-                hd_ngoaikhoa = tham_gia.hd_ngoaikhoa
-                dieu_id = hd_ngoaikhoa.dieu.id
-
-                if dieu_id not in dieu_points:
-                    dieu_points[dieu_id] = 0
-
-                dieu_points[dieu_id] += hd_ngoaikhoa.diem_ren_luyen
-
-            for dieu_id, points in dieu_points.items():
-                try:
-                    dieu = Dieu.objects.get(id=dieu_id)
-                    diem_ren_luyen += min(points, dieu.diem_toi_da)
-                except ObjectDoesNotExist:
-                    return Response({'error': f'Dieu với ID {dieu_id} không tồn tại'},
-                                    status=status.HTTP_400_BAD_REQUEST)
-
-            diem_ren_luyen_entry, created = DiemRenLuyen.objects.update_or_create(
-                sinh_vien=sinh_vien,
-                hk_nh_id=id_hoc_ky,
-                defaults={'diem_tong': diem_ren_luyen}
-            )
-            diem_ren_luyen_entry.save()
-
-            serializer = serializers.DiemRenLuyenSerializer(diem_ren_luyen_entry)
-            return Response(serializer.data, status=status.HTTP_200_OK)
-
-        except SinhVien.DoesNotExist:
-            return Response({'error': 'Sinh viên không tồn tại'}, status=status.HTTP_404_NOT_FOUND)
-
-        except Exception as e:
-            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)
-
-
-    @action(detail=False, methods=['get'], url_path=r'(?P<id_sinh_vien>\d+)/(?P<id_hoc_ky>\d+)')
-    def get_diem_ren_luyen(self, request, id_sinh_vien=None, id_hoc_ky=None):
-        try:
-            sinh_vien = SinhVien.objects.get(id=id_sinh_vien)
-        except SinhVien.DoesNotExist:
-            return Response({'error': 'Sinh viên không tồn tại'}, status=status.HTTP_404_NOT_FOUND)
-
-        try:
-            hoc_ky_nam_hoc = HocKy_NamHoc.objects.get(id=id_hoc_ky)
-        except HocKy_NamHoc.DoesNotExist:
-            return Response({'error': 'Học kỳ không tồn tại'}, status=status.HTTP_404_NOT_FOUND)
-
-        try:
-            diem_ren_luyen_entry = DiemRenLuyen.objects.get(sinh_vien=sinh_vien, hk_nh=hoc_ky_nam_hoc)
-        except DiemRenLuyen.DoesNotExist:
-            return Response({'error': 'Điểm rèn luyện không tồn tại'}, status=status.HTTP_404_NOT_FOUND)
-
-        return Response(serializers.DiemRenLuyenSerializer(diem_ren_luyen_entry).data)
-
-
-class HocKyNamHocViewset(viewsets.ViewSet, generics.ListAPIView):
-# class HocKyNamHocViewset(viewsets.ModelViewSet):
-    queryset = HocKy_NamHoc.objects.filter(active=True)
-    serializer_class = serializers.HockyNamhocSerializer
-
-    def get_permissions(self):
-        if self.action in ['create', 'update', 'partial_update', 'destroy']:
-            if isinstance(self.request.user, AnonymousUser):
-                return [permissions.IsAuthenticated()]
-            else:
-                if (self.request.user.is_authenticated and
-                        self.request.user.role in [TaiKhoan.Roles.CongTacSinhVien.value,
-                                                   TaiKhoan.Roles.ADMIN.value]):
-                    return [permissions.IsAuthenticated()]
-                else:
-                    raise exceptions.PermissionDenied()
-        return [permissions.AllowAny()]
-
-class HoatDongNgoaiKhoaViewSet(viewsets.ViewSet, generics.CreateAPIView, generics.ListAPIView, generics.UpdateAPIView):
-    queryset = HoatDongNgoaiKhoa.objects.filter(active=True)
-    serializer_class = serializers.HoatDongNgoaiKhoaSerializer
-
-    def retrieve(self, request, *args, **kwargs):
-        pk = kwargs.get('pk')
-        hd = HoatDongNgoaiKhoa.objects.get(id=pk)
-        if hd:
-            return Response(serializers.HoatDongNgoaiKhoaSerializer(hd).data, status=status.HTTP_200_OK)
-        return Response({'error': 'Không tìm thấy hoạt động ngoại khóa'}, status=status.HTTP_404_NOT_FOUND)
-
-    def get_queryset(self):
-        queryset = self.queryset
-        q = self.request.query_params.get('ten_HD_NgoaiKhoa')
-        hk = self.request.query_params.get('hoc_ky')
-        if q:
-           queryset = queryset.filter(ten_HD_NgoaiKhoa__icontains=q)
-
-        if hk:
-            queryset = queryset.filter(hk_nh__hoc_ky=hk)
-
-        return queryset
-
-    @action(methods=['get'], url_path='thamgias', detail=True)
-    def get_thamgias(self, request, pk):
-        hoatdong = HoatDongNgoaiKhoa.objects.get(id=pk)
-        thamgias = ThamGia.objects.filter(hd_ngoaikhoa=hoatdong)
-        return Response(serializers.ThamGiaSerializer(thamgias, many=True).data,
-                        status=status.HTTP_200_OK)
-
-
-
-    @action(methods=['get'], url_path='diemdanh', detail=False)
-    def get_hdnk_diemdanh(self, request):
-        # Chỉ điểm danh các hoạt động được tổ chức bởi khoa mình, không được điểm danh các hoạt được tổ chức bởi khoa khác
-        try:
-            hk = self.request.query_params.get('hoc_ky')
-            troly=TaiKhoan.objects.get(username=request.user.username)
-            khoa = TroLySinhVien_Khoa.objects.get(trolySV=troly).khoa
-            troly_list = TroLySinhVien_Khoa.objects.filter(khoa=khoa).values_list('trolySV', flat=True)
-            hoatdong= HoatDongNgoaiKhoa.objects.filter(hk_nh__hoc_ky=hk, tro_ly__in=troly_list,
-                                                       ngay_to_chuc__lte=timezone.now())
-
-            if not hoatdong.exists():
-                return Response({"message": "No activities found for the specified assistant and semester"},
-                                status=status.HTTP_404_NOT_FOUND)
-
-            return Response(serializers.HoatDongNgoaiKhoaSerializer(hoatdong, many=True).data,
-                            status=status.HTTP_200_OK)
-
-        except TaiKhoan.DoesNotExist:
-            return Response({"error": "User not found"}, status=status.HTTP_404_NOT_FOUND)
-
-        except TroLySinhVien_Khoa.DoesNotExist:
-            return Response({"error": "Assistant not found"}, status=status.HTTP_404_NOT_FOUND)
-
-        except Exception as e:
-            print(e)
-            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
-
-    @action(methods=['get'], url_path='quanly', detail=False)
-    def get_hdnk_quanly(self, request):
-        try:
-            hk = self.request.query_params.get('hoc_ky')
-            troly = TaiKhoan.objects.get(username=request.user.username);
-            khoa = TroLySinhVien_Khoa.objects.get(trolySV=troly).khoa;
-            troly_list = TroLySinhVien_Khoa.objects.filter(khoa=khoa).values_list('trolySV', flat=True)
-            hoatdong = HoatDongNgoaiKhoa.objects.filter(hk_nh__hoc_ky=hk, tro_ly__in=troly_list, active=True)
-
-
-
-            if not hoatdong.exists():
-                return Response({"message": "No activities found for the specified assistant and semester"},
-                                status=status.HTTP_404_NOT_FOUND)
-
-            return Response(serializers.HoatDongNgoaiKhoaSerializer(hoatdong, many=True).data,
-                            status=status.HTTP_200_OK)
-
-        except TaiKhoan.DoesNotExist:
-            return Response({"error": "User not found"}, status=status.HTTP_404_NOT_FOUND)
-
-        except TroLySinhVien_Khoa.DoesNotExist:
-            return Response({"error": "Assistant not found"}, status=status.HTTP_404_NOT_FOUND)
-
-        except Exception as e:
-            print(e)
-            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
-
-    @action(methods=['get'], detail=False, url_path='chua-co-bai-viet')
-    def get_activities_without_post(self, request):
-        try:
-            hoc_ky = self.request.query_params.get('hoc_ky')
-            troly=TaiKhoan.objects.get(username=request.user.username)
-            khoa = TroLySinhVien_Khoa.objects.get(trolySV=troly).khoa
-            troly_list = TroLySinhVien_Khoa.objects.filter(khoa=khoa).values_list('trolySV', flat=True)
-            hoatdong = HoatDongNgoaiKhoa.objects.filter(hk_nh__hoc_ky=hoc_ky, tro_ly__in=troly_list, active=True, ngay_to_chuc__gt=timezone.now())
-            # Lọc những hoạt động chưa có bài viết tương ứng trong model BaiViet
-            hoatdong_chua_co_baiviet = hoatdong.exclude(id__in=BaiViet.objects.values('hd_ngoaikhoa__id'))
-
-            return Response(serializers.HoatDongNgoaiKhoaSerializer(hoatdong_chua_co_baiviet, many=True).data, status=status.HTTP_200_OK)
-        except TaiKhoan.DoesNotExist:
-            return Response({"error": "User not found"}, status=status.HTTP_404_NOT_FOUND)
-
-        except TroLySinhVien_Khoa.DoesNotExist:
-            return Response({"error": "Assistant not found"}, status=status.HTTP_404_NOT_FOUND)
-
-        except Exception as e:
-            print(e)
-            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
-
-    @action(methods=['post'], detail=False, url_path='delete-hoat-dong')
-    def delete_hoat_dong(self, request, *args, **kwargs):
-        hoatdong_id = request.query_params.get('hd')
-        if not hoatdong_id:
-            return Response({'error': 'hoatdong_id is required'}, status=status.HTTP_400_BAD_REQUEST)
-
-        try:
-            hoatdong = HoatDongNgoaiKhoa.objects.get(id=hoatdong_id)
-        except HoatDongNgoaiKhoa.DoesNotExist:
-            return Response({'error': 'Hoat dong not found'}, status=status.HTTP_404_NOT_FOUND)
-
-        hoatdong.active = False
-        hoatdong.save()
-
-        baiviets = BaiViet.objects.filter(hd_ngoaikhoa=hoatdong.id)
-        if baiviets.exists():
-            baiviets.update(active=False)
-
-        return Response(serializers.HoatDongNgoaiKhoaSerializer(hoatdong).data, status=status.HTTP_200_OK)
-
-
-    def get_permissions(self):
-            if self.action in ['get_thamgias']:
-                return [permissions.IsAuthenticated()]
-            if self.action in ['create', 'update', 'partial_update', 'destroy']:
-                if isinstance(self.request.user, AnonymousUser):
-                    return [permissions.IsAuthenticated()]
-                else:
-                    if (self.request.user.is_authenticated and
-                            (self.request.user.role in [TaiKhoan.Roles.CongTacSinhVien.value,
-                                                        TaiKhoan.Roles.TroLySinhVien.value])):
-                        return [permissions.IsAuthenticated()]
-                    else:
-                        raise exceptions.PermissionDenied()
-            return [permissions.AllowAny()]
-
-    @action(methods=['get'], url_path='thamgias', detail=True)
-    def get_thamgias(self, request, pk):
-        hoatdong = HoatDongNgoaiKhoa.objects.get(id=pk)
-        thamgias = ThamGia.objects.filter(hd_ngoaikhoa=hoatdong)
-        return Response(serializers.ThamGiaSerializer(thamgias, many=True).data,
-                        status=status.HTTP_200_OK)
-
-class KhoaViewSet(viewsets.ViewSet,generics.ListAPIView):
-    queryset = Khoa.objects.filter(active=True)
-    serializer_class = serializers.KhoaSerializer
-
-    def get_queryset(self):
-        queryset = self.queryset
-        q = self.request.query_params.get('ten_khoa')
-        if q:
-           queryset = queryset.filter(ten_khoa__icontains=q)
-
-        return queryset
-
-    @action(methods=['get'], url_path='lops', detail=True)
-    def get_lops(self, request, pk):
-        lops = self.get_object().lop_set.filter(active=True)
-        q = request.query_params.get('ten_lop')
-        if q:
-            lops = lops.filter(ten_lop__icontains=q)
-
-        return Response(serializers.LopSerializer(lops, many=True).data,
-                        status=status.HTTP_200_OK)
-
-    @action(methods=['get'], url_path='sinhviens', detail=True)
-    def get_sinhviens(self, request, pk):
-        khoa = self.get_object()
-
-        lops = khoa.lop_set.filter(active=True).prefetch_related('sinhvien_set')
-        sinhviens = [sinhvien
-                     for lop in lops
-                     for sinhvien in lop.sinhvien_set.filter(active=True)
-                     ]
-        q = request.query_params.get('ho_ten')
-        if q:
-            sinhviens = [sinhvien for sinhvien in sinhviens if q.lower() in sinhvien.ho_ten.lower()]
-
-        mssv = request.query_params.get('mssv')
-        if mssv:
-            sinhviens = [sinhvien for sinhvien in sinhviens if mssv.lower() in sinhvien.mssv.lower()]
-
-        return Response(serializers.SinhVienSerializer(sinhviens, many=True).data,
-                        status=status.HTTP_200_OK)
-
-class LopViewSet(viewsets.ViewSet,generics.ListAPIView):
-    queryset = Lop.objects.filter(active=True)
-    serializer_class = serializers.LopSerializer
-    pagination_class = paginators.LopPaginator
-
-    def get_queryset(self):
-        queryset = self.queryset
-        if self.action == 'list':
-            q = self.request.query_params.get('ten_lop')
-            if q:
-                queryset = queryset.filter(ten_lop__icontains=q)
-
-        mssv = self.request.query_params.get('mssv')
-        if mssv:
-            queryset = queryset.filter(sinhvien__mssv=mssv)
-
-        return queryset
-
-    @action(methods=['get'], url_path='sinhviens', detail=True)
-    def get_sinhviens(self, request, pk):
-        sinhviens = self.get_object().sinhvien_set.filter(active=True)
-        q = request.query_params.get('ho_ten')
-        if q:
-            sinhviens = sinhviens.filter(ho_ten__icontains=q)
-
-        mssv = request.query_params.get('mssv')
-        if mssv:
-            sinhviens = sinhviens.filter(mssv=mssv)
-
-        return Response(serializers.SinhVienSerializer(sinhviens, many=True).data,
-                        status=status.HTTP_200_OK)
-
-class MinhChungViewSet(viewsets.ViewSet, generics.ListCreateAPIView,generics.UpdateAPIView, generics.RetrieveAPIView):
-    queryset = MinhChung.objects.filter(active=True)
-    serializer_class = serializers.MinhChungSerializer
-
-    def get_queryset(self):
-        queryset = self.queryset
-        if self.action == 'list':
-            mssv = self.request.query_params.get('mssv')
-            hoatdong = self.request.query_params.get('hoat_dong')
-            if mssv:
-                sinhvien = SinhVien.objects.get(mssv=mssv)
-                thamgias = ThamGia.objects.filter(sinh_vien=sinhvien)
-                queryset = queryset.filter(tham_gia__in=thamgias)
-            if hoatdong:
-                hoatdongs = HoatDongNgoaiKhoa.objects.filter(ten_HD_NgoaiKhoa__icontains=hoatdong)
-                thamgias = ThamGia.objects.filter(hd_ngoaikhoa__in=hoatdongs)
-                queryset = queryset.filter(tham_gia__in=thamgias)
-
-            return queryset
-
-    def retrieve(self, request, pk=None):
-        try:
-            minhchung = MinhChung.objects.get(pk=pk)
-        except MinhChung.DoesNotExist:
-            return Response(status=404)
-        serializer = self.serializer_class(minhchung)
-        return Response(serializer.data)
-
-class SinhVienViewSet(viewsets.ViewSet, generics.CreateAPIView, generics.UpdateAPIView, generics.ListAPIView, generics.RetrieveAPIView):
-    serializer_class = serializers.SinhVienSerializer
-    # pagination_class = paginators.SinhVienPaginator
-    queryset = SinhVien.objects.all()
-    def get_permissions(self):
-        if self.action == "sinhvien_is_valid":
-            return [permissions.AllowAny()]
-        if self.action in ['create']:
-            return [permissions.AllowAny()]
-        if isinstance(self.request.user, AnonymousUser):
-            return [permissions.IsAuthenticated()]
-        else:
-            if self.request.user.role == TaiKhoan.Roles.SinhVien:
-                if self.request.user.email == SinhVien.objects.filter(email=self.request.user.email).first().email:
-                    return [permissions.IsAuthenticated()]
-                else:
-                    raise exceptions.PermissionDenied()
-            elif (self.request.user.role == TaiKhoan.Roles.TroLySinhVien or
-                  self.request.user.role == TaiKhoan.Roles.CongTacSinhVien):
-                return [permissions.IsAuthenticated()]
-
-    def get_queryset(self):
-        queryset = self.queryset
-        q = self.request.query_params.get('ho_ten')
-        if q:
-           queryset = queryset.filter(ho_ten__icontains=q)
-        mssv = self.request.query_params.get('mssv')
-        if mssv:
-            queryset = queryset.filter(mssv=mssv)
-
-        return queryset
-
-    @action(methods=['get', 'patch'], url_path='current-sinhvien', detail=False)
-    def get_current_sv(self, request):
-        sv = SinhVien.objects.get(email=request.user.email)
-        if request.method == "PATCH":
-            for k, v in request.data.items():
-                if hasattr(sv, k):
-                    setattr(sv, k, v)
-            sv.save()
-        return Response(serializers.SinhVienSerializer(sv).data)
-
-class TaiKhoanViewSet(viewsets.ViewSet, generics.CreateAPIView):
-    queryset = TaiKhoan.objects.filter(is_active=True).all()
-    serializer_class = serializers.TaiKhoanSerializer
-    # parser_classes = [parsers.MultiPartParser]
-
-
-    def get_permissions(self):
-        if self.action in ['taikhoan_is_valid', 'login_firebase', 'khoa']:
-            return [permissions.AllowAny()]
-        if self.action in ['get_current_user','partial_update']:
-            return [permissions.IsAuthenticated()]
-        elif self.action == "create":
-            if isinstance(self.request.user, AnonymousUser):
-                if self.request.data and (self.request.data.get('role') == str(TaiKhoan.Roles.SinhVien)):
-                    return [permissions.AllowAny()]
-                else:
-                    return [permissions.IsAuthenticated()]
-            elif self.request.data and self.request.data.get('role') == str(TaiKhoan.Roles.TroLySinhVien):
-                if self.request.user.role in [TaiKhoan.Roles.CongTacSinhVien.value, TaiKhoan.Roles.ADMIN.value]:
-                    return [permissions.IsAuthenticated()]
-                else:
-                    raise exceptions.PermissionDenied()
-            elif self.request.data and self.request.data.get('role') in [str(TaiKhoan.Roles.CongTacSinhVien),
-                                                                         str(TaiKhoan.Roles.ADMIN)]:
-                if self.request.user.role == TaiKhoan.Roles.ADMIN.value:
-                    return [permissions.IsAuthenticated()]
-                else:
-                    raise exceptions.PermissionDenied()
-
-
-    # @action(methods=['get'], detail=True)
-    # def timkiemsinhvien(self, request, pk):
-    #     taikhoan = TaiKhoan.objects.get(id=pk)
-    #     sinhvien = SinhVien.objects.get(email=taikhoan.email)
-    #     if sinhvien:
-    #         return Response(serializers.SinhVienSerializer(sinhvien).data, status=status.HTTP_200_OK)
-    #     return Response({'error': 'Không tìm thấy sinh viên'}, status=status.HTTP_404_NOT_FOUND)
-
-
-
-
-    @action(methods=['get', 'patch'], url_path='current-taikhoan', detail=False)
-    def get_current_user(self, request):
-        user = request.user
-        if request.method.__eq__("PATCH"):
-            for k, v in request.data.items():
-                setattr(user, k, v)  # user.k = v (user.name = v)
-            user.save()
-
-        return Response(serializers.TaiKhoanSerializer(user).data)
-
-    @action(methods=['get'], url_path='is_valid', detail=False)
-    def taikhoan_is_valid(self, request):
-        email = self.request.query_params.get('email')
-        username = self.request.query_params.get('username')
-
-        if email:
-            taikhoan = TaiKhoan.objects.filter(email=email)
-            if taikhoan.exists():
-                return Response(data={'is_valid': "True", 'message': 'Email đã tồn tại'}, status=status.HTTP_200_OK)
-
-        if username:
-            taikhoan = TaiKhoan.objects.filter(username=username)
-            if taikhoan.exists():
-                return Response(data={'is_valid': "True", 'message': 'Username đã tồn tại'},
-                                status=status.HTTP_200_OK)
-
-        return Response(data={'is_valid': "False"}, status=status.HTTP_200_OK)
-
-
-    @action(methods=['get'], url_path='firebase', detail=False)
-    def login_firebase(self, request):
-        user = TaiKhoan.objects.get(username=request.user.username)
-        if user is not None:
-            # Tạo Firebase token tùy chỉnh
-            custom_token = firebase_auth.create_custom_token(str(user.id))
-            custom_token_str = custom_token.decode('utf-8')
-            return JsonResponse({'token': custom_token_str})
-        else:
-            return JsonResponse({'error': 'Invalid credentials'}, status=400)
-
-    @action(methods=['get'], url_path='khoa', detail=False)
-    def khoa(self, request):
-        user = TaiKhoan.objects.get(username=request.user.username)
-        if user:
-            if user.role == TaiKhoan.Roles.TroLySinhVien:
-                khoa = TroLySinhVien_Khoa.objects.get(trolySV=user).khoa
-                return Response(serializers.KhoaSerializer(khoa).data, status=status.HTTP_200_OK)
-            elif user.role == TaiKhoan.Roles.SinhVien:
-                khoa = SinhVien.objects.get(email=request.user.email).lop.khoa
-                return Response(serializers.KhoaSerializer(khoa).data, status=status.HTTP_200_OK)
-            else:
-                return Response({'error': 'Không tìm thấy khoa'}, status=status.HTTP_404_NOT_FOUND)
-
-
-class TroLySinhVienKhoaViewset(viewsets.ViewSet, generics.ListAPIView, generics.CreateAPIView):
-    queryset = TroLySinhVien_Khoa.objects.all()
-    serializer_class = serializers.TroLySinhVien_KhoaSerializer
-
-    def get_permissions(self):
-        if self.action in ['create', 'update', 'partial_update']:
-            if isinstance(self.request.user, AnonymousUser):
-                return [permissions.IsAuthenticated()]
-            else:
-                if (self.request.user.is_authenticated and
-                        self.request.user.role in [TaiKhoan.Roles.CongTacSinhVien.value,
-                                                   TaiKhoan.Roles.ADMIN.value]):
-                    return [permissions.IsAuthenticated()]
-                else:
-                    raise exceptions.PermissionDenied()
-        elif self.action == 'get':
-            if (self.request.user.is_authenticated and
-                    self.request.user.role in [TaiKhoan.Roles.TroLySinhVienKhoa.value]):
-                return [permissions.IsAuthenticated()]
-
-        return [permissions.AllowAny()]
-
-    def get_queryset(self):
-        queryset = self.queryset
-        q = self.request.query_params.get('q')
-        if q:
-            queryset = queryset.filter(tai_khoan__ho_ten__icontains=q)
-
-        return queryset
-
-    @action(methods=['get'], url_path='khoa', detail=True)
-    def get_troly(self, request, pk):
-        troly = TroLySinhVien_Khoa.objects.get(pk=pk)
-
-        return Response(serializers.SinhVienSerializer(troly, many=True).data,
-                        status=status.HTTP_200_OK)
-
-class ThamGiaViewSet(viewsets.ViewSet, generics.ListAPIView, generics.UpdateAPIView, UpdateModelMixin):
-    queryset = ThamGia.objects.all()
-    serializer_class = serializers.ThamGiaSerializer
-
-    def get_queryset(self):
-        queryset = self.queryset
-        if self.action == 'list':
-            namhoc = self.request.query_params.get('nam_hoc')
-            if namhoc:
-                hocky_namhoc = HocKy_NamHoc.objects.filter(nam_hoc=namhoc)
-                hoatdong_ids = HoatDongNgoaiKhoa.objects.filter(hk_nh__in=hocky_namhoc).values_list('id', flat=True)
-                queryset = queryset.filter(hoat_dong_ngoai_khoa_id__in=hoatdong_ids)
-            hocky = self.request.query_params.get('hoc_ky')
-            if hocky:
-                hocky_namhoc = HocKy_NamHoc.objects.filter(hoc_ky=hocky)
-                hoatdong_ids = HoatDongNgoaiKhoa.objects.filter(hk_nh__in=hocky_namhoc).values_list('id', flat=True)
-                queryset = queryset.filter(hoat_dong_ngoai_khoa_id__in=hoatdong_ids)
-            mssv = self.request.query_params.get('mssv')
-            if mssv:
-                sinhvien = SinhVien.objects.get(mssv=mssv)
-                queryset = queryset.filter(sinh_vien=sinhvien)
-
-        return queryset
-    @action(methods=['get'], url_path='minhchungs', detail=True)
-    def get_thamgias(self, request, pk):
-        thamgia = ThamGia.objects.get(id=pk)
-        minhchung = MinhChung.objects.filter(tham_gia=thamgia)
-        return Response(serializers.MinhChungSerializer(minhchung, many=True).data,
-                        status=status.HTTP_200_OK)
-
-    @action(detail=False, methods=['get'], url_path='baothieu')
-    def get_baothieu(self, request):
-        queryset = self.queryset.filter(trang_thai=ThamGia.TrangThai.BaoThieu)
-        serializer = self.serializer_class(queryset, many=True)
-        return Response(serializer.data)
-
-    @action(methods=['patch'], url_path='capnhat', detail=True)
-    def capnhat(self, request, pk=None):
-        try:
-            thamgia = ThamGia.objects.get(pk=pk)
-        except ThamGia.DoesNotExist:
-            return Response(status=status.HTTP_404_NOT_FOUND)
-
-        try:
-            minhchung = MinhChung.objects.get(tham_gia=thamgia)
-        except MinhChung.DoesNotExist:
-            return Response(status=status.HTTP_404_NOT_FOUND)
-
-        serializer = serializers.MinhChungSerializer(minhchung, data=request.data, partial=True)
-        if serializer.is_valid():
-            serializer.save()
-            return Response(serializer.data, status=status.HTTP_200_OK)
-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
-
-    def partial_update(self, request, pk=None):
-        try:
-            thamgia = ThamGia.objects.get(pk=pk)
-        except ThamGia.DoesNotExist:
-            return Response(status=status.HTTP_404_NOT_FOUND)
-
-        serializer = self.serializer_class(thamgia, data=request.data, partial=True)
-        if serializer.is_valid():
-            serializer.save()
-            return Response(serializer.data, status=status.HTTP_200_OK)
-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
-
-
-    def retrieve(self, request, pk=None):
-        try:
-            thamgia = ThamGia.objects.get(pk=pk)
-        except ThamGia.DoesNotExist:
-            return Response(status=404)
-        serializer = self.serializer_class(thamgia)
-        return Response(serializer.data)
-
-
-    @action(methods=['get'], detail=False, url_path=r'hoat-dong-diem-danh/(?P<id_sinh_vien>\d+)/(?P<id_hoc_ky>\d+)')
-    def hoat_dong_diem_danh(self, request, id_sinh_vien=None, id_hoc_ky=None):
-        try:
-            sinh_vien = SinhVien.objects.get(id=id_sinh_vien)
-        except SinhVien.DoesNotExist:
-            return Response({'error': 'Sinh viên không tồn tại'}, status=status.HTTP_404_NOT_FOUND)
-
-        try:
-            hoc_ky_nam_hoc = HocKy_NamHoc.objects.get(id=id_hoc_ky)
-        except HocKy_NamHoc.DoesNotExist:
-            return Response({'error': 'Học kỳ không tồn tại'}, status=status.HTTP_404_NOT_FOUND)
-
-        hoat_dong_ngoai_khoa_ids = HoatDongNgoaiKhoa.objects.filter(hk_nh=hoc_ky_nam_hoc).values_list('id', flat=True)
-        thamgias = ThamGia.objects.filter(
-            sinh_vien=sinh_vien,
-            trang_thai=ThamGia.TrangThai.DiemDanh,
-            hd_ngoaikhoa_id__in=hoat_dong_ngoai_khoa_ids
-        )
-        hoat_dong_ngoai_khoa = HoatDongNgoaiKhoa.objects.filter(
-            id__in=thamgias.values_list('hd_ngoaikhoa_id', flat=True)
-        )
-
-        return Response(serializers.HoatDongNgoaiKhoaSerializer(hoat_dong_ngoai_khoa, many=True).data)
-
-    @action(methods=['get'], detail=False, url_path=r'hoat-dong-chua-diem-danh/(?P<id_sinh_vien>\d+)/(?P<id_hoc_ky>\d+)')
-    def hoat_dong_chua_diem_danh(self, request, id_sinh_vien=None, id_hoc_ky=None):
-        try:
-            sinh_vien = SinhVien.objects.get(id=id_sinh_vien)
-        except SinhVien.DoesNotExist:
-            return Response({'error': 'Sinh viên không tồn tại'}, status=status.HTTP_404_NOT_FOUND)
-
-        try:
-            hoc_ky_nam_hoc = HocKy_NamHoc.objects.get(id=id_hoc_ky)
-        except HocKy_NamHoc.DoesNotExist:
-            return Response({'error': 'Học kỳ không tồn tại'}, status=status.HTTP_404_NOT_FOUND)
-
-        hoat_dong_ngoai_khoa_ids = HoatDongNgoaiKhoa.objects.filter(hk_nh=hoc_ky_nam_hoc).values_list('id', flat=True)
-        thamgias = ThamGia.objects.filter(
-            sinh_vien=sinh_vien,
-            trang_thai__in=[
-                ThamGia.TrangThai.DangKy,
-                ThamGia.TrangThai.BaoThieu,
-                ThamGia.TrangThai.KhongHopLy
-            ],
-            hd_ngoaikhoa_id__in=hoat_dong_ngoai_khoa_ids
-        )
-
-        return Response(serializers.ThamGiaSerializer(thamgias, many=True).data)
-
-
-
-    @action(methods=['post'], url_path='dang-ky-hoat-dong', detail=True)
-    def dangkyhoatdong(self, request, pk=None):
-        data = request.data.copy()
-        hd_ngoaikhoa = HoatDongNgoaiKhoa.objects.get(id=pk)
-        sinh_vien = SinhVien.objects.get(email=request.user.email)
-        tham_gia = ThamGia.objects.create(
-            sinh_vien=sinh_vien,
-            hd_ngoaikhoa=hd_ngoaikhoa,
-            trang_thai=ThamGia.TrangThai.DangKy
-        )
-
-        serializer = self.serializer_class(tham_gia)
-        return Response(serializer.data, status=status.HTTP_201_CREATED)
-
-    @action(methods=['get'], detail=True, url_path='kiem-tra-dang-ky')
-    def check_registration_status(self, request, pk=None):
-        sinh_vien = SinhVien.objects.get(email=request.user.email)
-        registered = ThamGia.objects.filter(hd_ngoaikhoa=pk, sinh_vien=sinh_vien).exists()
-        if not registered:
-            return Response({'registered': False}, status=status.HTTP_200_OK)
-        return Response({'registered': True}, status=status.HTTP_200_OK)
-
-
-
-class RolePermission(IsAuthenticated):
-    def has_permission(self, request, view):
-        return super().has_permission(request, view) and request.user.role in [
-            TaiKhoan.Roles.CongTacSinhVien.value,
-            TaiKhoan.Roles.TroLySinhVien.value
-        ]
-
-class ExportBaoCaoViewLop(APIView):
-
-    permission_classes = [RolePermission]
-    def get(self, request, id_lop, id_hoc_ky, id_format):
-        try:
-            lop = Lop.objects.get(pk=id_lop)
-            khoa=Khoa.objects.get(pk=lop.khoa_id)
-            hoc_ky_nam_hoc = HocKy_NamHoc.objects.get(pk=id_hoc_ky)
-            sinh_viens = lop.sinhvien_set.all()
-            diem_ren_luyen = DiemRenLuyen.objects.filter(sinh_vien__in=sinh_viens, hk_nh=hoc_ky_nam_hoc)
-            serializer = serializers.BaoCaoSerializer(diem_ren_luyen, many=True)
-
-            if id_format == 1:
-                return self.export_csv(serializer.data, lop,khoa,hoc_ky_nam_hoc)
-            elif id_format == 2:
-                return self.export_pdf(serializer.data, lop,khoa,hoc_ky_nam_hoc)
-            else:
-                return Response({'error': 'Định dạng không hỗ trợ'}, status=status.HTTP_400_BAD_REQUEST)
-        except Lop.DoesNotExist:
-            return Response({'error': 'Lớp không tồn tại'}, status=status.HTTP_404_NOT_FOUND)
-        except HocKy_NamHoc.DoesNotExist:
-            return Response({'error': 'Học kỳ năm học không tồn tại'}, status=status.HTTP_404_NOT_FOUND)
-        except Exception as e:
-            return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
-
-    def export_csv(self, data, lop, khoa, hk):
-        response = HttpResponse(content_type='text/csv')
-        file_name = f"bao_cao_diem_ren_luyen_lop_{lop}_khoa_{khoa}.csv"
-        file_name_ascii = unidecode(file_name).lower()
-        response['Content-Disposition'] = f'attachment; filename="{file_name_ascii}"'
-
-        writer = csv.writer(response)
-
-        # Get current date and time
-        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
-
-        # Write header
-        writer.writerow(['', '', '', '', '', f"Ngày in: {now}"])
-        writer.writerow(['', '', '', '', '', f"Mẫu: Báo cáo điểm rèn luyện"])
-        writer.writerow([])
-
-        # Write title
-        writer.writerow([f"Báo cáo điểm rèn luyện lớp {lop} - Khoa {khoa} - Học kì {hk}", '', '', '', '', ''])
-        writer.writerow([])
-
-        # Write table headers
-        writer.writerow(['Sinh Viên', 'Mã số sinh viên', 'Lớp', 'Khoa', 'Điểm Tổng', 'Xếp Loại'])
-
-        # Write table data
-        for item in data:
-            writer.writerow(
-                [item['sinh_vien'], item['mssv'], item['lop'], item['khoa'], item['diem_tong'], item['xep_loai']])
-
-        return response
-
-    def export_pdf(self, data, lop, khoa,hk):
-        pdfmetrics.registerFont(TTFont('TimesNewRoman', 'times.ttf'))
-        pdfmetrics.registerFont(TTFont('TimesNewRoman-Bold', 'timesbd.ttf'))
-
-
-        buffer = BytesIO()
-        doc = SimpleDocTemplate(buffer, pagesize=letter)
-        elements = []
-
-        # Define styles
-        styles = getSampleStyleSheet()
-        title_style = ParagraphStyle(
-            'title',
-            parent=styles['Title'],
-            fontName='TimesNewRoman-Bold',
-            fontSize=16,
-            alignment=1  # Center alignment
-        )
-        header_style = ParagraphStyle(
-            'header',
-            parent=styles['Normal'],
-            fontName='TimesNewRoman',
-            fontSize=10,
-            alignment=2,  # Right alignment
-            italic=True
-        )
-        table_style = TableStyle([
-            ('FONT', (0, 0), (-1, -1), 'TimesNewRoman'),
-            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
-            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
-            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
-            ('FONTNAME', (0, 0), (-1, 0), 'TimesNewRoman-Bold'),
-            ('FONTSIZE', (0, 0), (-1, 0), 14),
-            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
-            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
-            ('GRID', (0, 0), (-1, -1), 1, colors.black)
-        ])
-        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
-        # Add header
-        # Add header
-        header = Paragraph(f"Ngày in: {now}<br/>Mẫu: Báo cáo điểm rèn luyện", header_style)
-        elements.append(header)
-        elements.append(Spacer(1, 12))
-
-        # Add title
-        title = Paragraph(f"Báo cáo điểm rèn luyện lớp {lop} - Khoa {khoa}<br/>Học kì {hk}", title_style)
-        elements.append(title)
-        elements.append(Spacer(1, 12))
-
-        # Create table data
-        data_table = [['Sinh Viên', 'Mã số sinh viên','Lớp', 'Khoa', 'Điểm Tổng', 'Xếp Loại']]
-        for item in data:
-            data_table.append([
-                item['sinh_vien'],
-                item['mssv'],
-                item['lop'],
-                item['khoa'],
-                str(item['diem_tong']),
-                item['xep_loai']
-            ])
-
-        col_widths = [120, 100, 100, 80, 80]
-        # Create table
-        table = Table(data_table, colWidths=col_widths)
-        table.setStyle(table_style)
-        elements.append(table)
-
-
-        # Create a frame to hold the elements
-        doc.build(elements)
-        file_name = f"bao_cao_diem_ren_luyen_lop_{lop}_khoa_{khoa}.pdf"
-        file_name_ascii = unidecode(file_name).lower()
-
-        response = HttpResponse(buffer.getvalue(), content_type='application/pdf')
-        response['Content-Disposition'] = f'attachment; filename="{file_name_ascii}"'
-
-        buffer.close()
-        return response
-
-class ExportBaoCaoViewKhoa(APIView):
-    permission_classes = [RolePermission]
-
-    def get(self, request, id_khoa, id_hoc_ky, id_format):
-        try:
-            khoa = Khoa.objects.get(pk=id_khoa)
-            hoc_ky_nam_hoc = HocKy_NamHoc.objects.get(pk=id_hoc_ky)
-            lop_list = Lop.objects.filter(khoa_id=khoa.id)
-            sinh_viens = SinhVien.objects.filter(lop__in=lop_list)
-            diem_ren_luyen = DiemRenLuyen.objects.filter(sinh_vien__in=sinh_viens, hk_nh=hoc_ky_nam_hoc)
-            serializer = serializers.BaoCaoSerializer(diem_ren_luyen, many=True)
-
-            if id_format == 1:
-                return self.export_csv(serializer.data, khoa, hoc_ky_nam_hoc)
-            elif id_format == 2:
-                return self.export_pdf(serializer.data, khoa, hoc_ky_nam_hoc)
-            else:
-                return Response({'error': 'Định dạng không hỗ trợ'}, status=status.HTTP_400_BAD_REQUEST)
-        except Khoa.DoesNotExist:
-            return Response({'error': 'Khoa không tồn tại'}, status=status.HTTP_404_NOT_FOUND)
-        except HocKy_NamHoc.DoesNotExist:
-            return Response({'error': 'Học kỳ năm học không tồn tại'}, status=status.HTTP_404_NOT_FOUND)
-        except Exception as e:
-            return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
-
-    def export_csv(self, data, khoa, hk):
-        response = HttpResponse(content_type='text/csv')
-        file_name = f"bao_cao_diem_ren_luyen_khoa_{khoa}.csv"
-        file_name_ascii = unidecode(file_name).lower()
-        response['Content-Disposition'] = f'attachment; filename="{file_name_ascii}"'
-
-        writer = csv.writer(response)
-
-        # Get current date and time
-        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
-
-        # Write header
-        writer.writerow(['', '', '', '', '', f"Ngày in: {now}"])
-        writer.writerow(['', '', '', '', '', f"Mẫu: Báo cáo điểm rèn luyện"])
-        writer.writerow([])
-
-        # Write title
-        writer.writerow([f"Báo cáo điểm rèn luyện khoa {khoa} - Học kì {hk}", '', '', '', '', ''])
-        writer.writerow([])
-
-        # Write table headers
-        writer.writerow(['Sinh Viên', 'Mã số sinh viên', 'Lớp', 'Khoa', 'Điểm Tổng', 'Xếp Loại'])
-
-        # Write table data
-        for item in data:
-            writer.writerow(
-                [item['sinh_vien'], item['mssv'], item['lop'], item['khoa'], item['diem_tong'], item['xep_loai']])
-
-        return response
-
-    def export_pdf(self, data, khoa, hk):
-        pdfmetrics.registerFont(TTFont('TimesNewRoman', 'times.ttf'))
-        pdfmetrics.registerFont(TTFont('TimesNewRoman-Bold', 'timesbd.ttf'))
-
-        buffer = BytesIO()
-        doc = SimpleDocTemplate(buffer, pagesize=letter)
-        elements = []
-
-        # Define styles
-        styles = getSampleStyleSheet()
-        title_style = ParagraphStyle(
-            'title',
-            parent=styles['Title'],
-            fontName='TimesNewRoman-Bold',
-            fontSize=16,
-            alignment=1
-        )
-        header_style = ParagraphStyle(
-            'header',
-            parent=styles['Normal'],
-            fontName='TimesNewRoman',
-            fontSize=10,
-            alignment=2,
-            italic=True
-        )
-        table_style = TableStyle([
-            ('FONT', (0, 0), (-1, -1), 'TimesNewRoman'),
-            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
-            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
-            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
-            ('FONTNAME', (0, 0), (-1, 0), 'TimesNewRoman-Bold'),
-            ('FONTSIZE', (0, 0), (-1, 0), 14),
-            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
-            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
-            ('GRID', (0, 0), (-1, -1), 1, colors.black)
-        ])
-
-        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
-
-        # Add header
-        header = Paragraph(f"Ngày in: {now}<br/>Mẫu: Báo cáo điểm rèn luyện", header_style)
-        elements.append(header)
-        elements.append(Spacer(1, 12))
-
-        # Add title
-        title = Paragraph(f"Báo cáo điểm rèn luyện khoa {khoa}<br/>Học kì {hk}", title_style)
-        elements.append(title)
-        elements.append(Spacer(1, 12))
-
-        # Create table data
-        data_table = [['Sinh Viên', 'Mã số sinh viên', 'Lớp', 'Khoa', 'Điểm Tổng', 'Xếp Loại']]
-        for item in data:
-            data_table.append([
-                item['sinh_vien'],
-                item['mssv'],
-                item['lop'],
-                item['khoa'],
-                str(item['diem_tong']),
-                item['xep_loai']
-            ])
-
-        col_widths = [120, 100, 100, 80, 80]
-        # Create table
-        table = Table(data_table, colWidths=col_widths)
-        table.setStyle(table_style)
-        elements.append(table)
-
-        # Build PDF
-        doc.build(elements)
-
-        file_name = f"bao_cao_diem_ren_luyen_khoa_{khoa}.pdf"
-        file_name_ascii = unidecode(file_name).lower()
-
-        response = HttpResponse(buffer.getvalue(), content_type='application/pdf')
-        response['Content-Disposition'] = f'attachment; filename="{file_name_ascii}"'
-
-        buffer.close()
-        return response
-
-class BaoCaoChiTietSinhVien(APIView):
-    def get(self, request, sinh_vien_id, hoc_ky_id, id_format):
-
-        sinh_vien = SinhVien.objects.get(id=sinh_vien_id)
-        hoc_ky = HocKy_NamHoc.objects.get(id=hoc_ky_id)
-        diem_ren_luyen = DiemRenLuyen.objects.get(sinh_vien=sinh_vien, hk_nh=hoc_ky)
-        tham_gia = ThamGia.objects.filter(sinh_vien=sinh_vien, hd_ngoaikhoa__hk_nh=hoc_ky,
-                                          trang_thai=ThamGia.TrangThai.DiemDanh).select_related('hd_ngoaikhoa__dieu')
-
-        if id_format == 1:
-            csv_response = self.generate_csv(sinh_vien, hoc_ky, diem_ren_luyen, tham_gia)
-            return csv_response
-        elif id_format == 2:
-            pdf_buffer = self.generate_pdf(sinh_vien, hoc_ky, diem_ren_luyen, tham_gia)
-            return HttpResponse(pdf_buffer.getvalue(), content_type='application/pdf')
-
-    def generate_pdf(self, sinh_vien, hoc_ky, diem_ren_luyen, tham_gia):
-        pdfmetrics.registerFont(TTFont('TimesNewRoman', 'times.ttf'))
-        pdfmetrics.registerFont(TTFont('TimesNewRoman-Bold', 'timesbd.ttf'))
-
-        buffer = BytesIO()
-        doc = SimpleDocTemplate(buffer, pagesize=letter)
-        elements = []
-
-        styles = getSampleStyleSheet()
-        title_style = ParagraphStyle(
-            'title',
-            parent=styles['Title'],
-            fontName='TimesNewRoman-Bold',
-            fontSize=14,
-            alignment=1
-        )
-        header_style = ParagraphStyle(
-            'header',
-            parent=styles['Normal'],
-            fontName='TimesNewRoman',
-            fontSize=9,
-            alignment=0,
-            italic=True
-        )
-        table_style = TableStyle([
-            ('FONT', (0, 0), (-1, -1), 'TimesNewRoman'),
-            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
-            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
-            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
-            ('FONTNAME', (0, 0), (-1, 0), 'TimesNewRoman-Bold'),
-            ('FONTSIZE', (0, 0), (-1, 0), 10),
-            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
-            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
-            ('GRID', (0, 0), (-1, -1), 1, colors.black),
-            # ('SPAN', (0, 1), (1, 1)),  # Gộp 2 cột đầu của hàng thứ 2 (tên Điều)
-            ('SPAN', (0, -2), (1, -2)),  # Gộp 2 cột đầu của hàng tổng điểm cuối
-            ('SPAN', (0, -1), (1, -1)),  # Gộp 2 cột đầu của hàng xếp loại cuối
-        ])
-
-        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
-
-
-        header = Paragraph(f"Ngày in: {now}<br/>Mẫu: Báo cáo chi tiết điểm rèn luyện", header_style)
-        elements.append(header)
-        elements.append(Spacer(1, 12))
-
-
-        title = Paragraph(f"Chi tiết điểm rèn luyện sinh viên {sinh_vien.ho_ten}<br/>Học kì {hoc_ky}", title_style)
-        elements.append(title)
-        elements.append(Spacer(1, 12))
-
-
-        data_table = [['STT', 'Minh chứng', 'Điểm SV', 'Điểm tối đa']]
-
-
-        dieu_dict = {}
-        for tg in tham_gia:
-            dieu = tg.hd_ngoaikhoa.dieu
-            if dieu not in dieu_dict:
-                dieu_dict[dieu] = []
-            dieu_dict[dieu].append(tg)
-
-        stt = 1
-        for dieu, tgs in dieu_dict.items():
-
-            total_diem_sv = sum(tg.hd_ngoaikhoa.diem_ren_luyen for tg in tgs)
-            data_table.append([f"Điều {dieu.ma_dieu}", dieu.ten_dieu, total_diem_sv, dieu.diem_toi_da])
-            for tg in tgs:
-                data_table.append([
-                    stt,
-                    tg.hd_ngoaikhoa.ten_HD_NgoaiKhoa,
-                    tg.hd_ngoaikhoa.diem_ren_luyen,
-                    '',
-                ])
-                stt += 1
-
-        data_table.append(['Điểm tổng:', '', diem_ren_luyen.diem_tong, ''])
-        data_table.append(['Xếp loại:', '', diem_ren_luyen.get_xep_loai_display(), ''])
-
-        col_widths = [40, 320, 80, 80]
-
-        table = Table(data_table, colWidths=col_widths)
-        table.setStyle(table_style)
-        elements.append(table)
-
-
-        doc.build(elements)
-
-        buffer.seek(0)
-        return buffer
-
-    def generate_csv(self, sinh_vien, hoc_ky, diem_ren_luyen, tham_gia):
-        response = HttpResponse(content_type='text/csv')
-        response['Content-Disposition'] = f'attachment; filename="bao_cao_chi_tiet_diem_ren_luyen_{sinh_vien.mssv}_hk_{hoc_ky.id}.csv"'
-
-        writer = csv.writer(response)
-
-        writer.writerow(['STT', 'Điều', 'Tên hoạt động', 'Điểm SV', 'Điểm tối đa'])
-
-        stt = 1
-        for tg in tham_gia:
-            dieu = tg.hd_ngoaikhoa.dieu
-            writer.writerow([
-                f"{stt}. Điều {dieu.ma_dieu}: {dieu.ten_dieu}",
-                '',
-                '',
-                '',
-            ])
-            writer.writerow([
-                '',
-                '',
-                tg.hd_ngoaikhoa.ten_HD_NgoaiKhoa,  # Tên hoạt động ngoại khóa
-                tg.hd_ngoaikhoa.diem_ren_luyen,
-                '',
-            ])
-            stt += 1
-
-        writer.writerow(['', 'Điểm tổng:', diem_ren_luyen.diem_tong, ''])
-        writer.writerow(['', 'Xếp loại:', diem_ren_luyen.get_xep_loai_display(), ''])
-
-        return response
-
-
-
-
-
-class BaoCaoViewLop(APIView):
-    permission_classes = [RolePermission]
-
-    def get(self, request, id_lop, id_hoc_ky):
-        try:
-            lop = Lop.objects.get(pk=id_lop)
-            hoc_ky_nam_hoc = HocKy_NamHoc.objects.get(pk=id_hoc_ky)
-            sinh_viens = lop.sinhvien_set.all()  # Get all students in the class
-            diem_ren_luyen = DiemRenLuyen.objects.filter(sinh_vien__in=sinh_viens, hk_nh=hoc_ky_nam_hoc)
-            serializer = serializers.BaoCaoSerializer(diem_ren_luyen, many=True)
-            return Response(serializer.data, status=status.HTTP_200_OK)
-        except Lop.DoesNotExist:
-            return Response({'error': 'Lớp không tồn tại'}, status=status.HTTP_404_NOT_FOUND)
-        except HocKy_NamHoc.DoesNotExist:
-            return Response({'error': 'Học kỳ năm học không tồn tại'}, status=status.HTTP_404_NOT_FOUND)
-        except Exception as e:
-            return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
-
-class BaoCaoViewKhoa(APIView):
-    permission_classes = [RolePermission]
-
-    def get(self, request, id_khoa, id_hoc_ky):
-        try:
-            khoa = Khoa.objects.get(pk=id_khoa)
-            hoc_ky_nam_hoc = HocKy_NamHoc.objects.get(pk=id_hoc_ky)
-            sinh_viens = SinhVien.objects.filter(lop__khoa=khoa)  # Get all students in the department
-            diem_ren_luyen = DiemRenLuyen.objects.filter(sinh_vien__in=sinh_viens, hk_nh=hoc_ky_nam_hoc)
-            serializer = serializers.BaoCaoSerializer(diem_ren_luyen, many=True)
-            return Response(serializer.data, status=status.HTTP_200_OK)
-        except Khoa.DoesNotExist:
-            return Response({'error': 'Khoa không tồn tại'}, status=status.HTTP_404_NOT_FOUND)
-        except HocKy_NamHoc.DoesNotExist:
-            return Response({'error': 'Học kỳ năm học không tồn tại'}, status=status.HTTP_404_NOT_FOUND)
-        except Exception as e:
-            return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
-
-# class CalculateDiemRenLuyen(APIView):
-#
-#     permission_classes = [RolePermission]
-#
-#     def post(self, request, sinhvien_id, hk_id):
-#         try:
-#             sinh_vien = SinhVien.objects.get(id=sinhvien_id)
-#             # Lấy tất cả các hoạt động mà sinh viên đã tham gia trong học kỳ đó
-#             hoat_dong_tham_gia = ThamGia.objects.filter(sinh_vien=sinh_vien, hd_ngoaikhoa__hk_nh_id=hk_id, trang_thai=ThamGia.TrangThai.DiemDanh)
-#             # Tính điểm rèn luyện
-#             diem_ren_luyen = 0
-#             dieu_points = {}
-#
-#             for tham_gia in hoat_dong_tham_gia:
-#                 hd_ngoaikhoa = tham_gia.hd_ngoaikhoa
-#                 dieu_id = hd_ngoaikhoa.dieu.id
-#
-#                 if dieu_id not in dieu_points:
-#                     dieu_points[dieu_id] = 0
-#
-#                 dieu_points[dieu_id] += hd_ngoaikhoa.diem_ren_luyen
-#
-#             for dieu_id, points in dieu_points.items():
-#                 try:
-#                     dieu = Dieu.objects.get(id=dieu_id)
-#                     diem_ren_luyen += min(points, dieu.diem_toi_da)
-#                 except ObjectDoesNotExist:
-#                     return Response({'error': f'Dieu với ID {dieu_id} không tồn tại'},
-#                                     status=status.HTTP_400_BAD_REQUEST)
-#
-#             # Lưu điểm rèn luyện vào bảng DiemRenLuyen
-#             diem_ren_luyen_entry, created = DiemRenLuyen.objects.update_or_create(
-#                 sinh_vien=sinh_vien,
-#                 hk_nh_id=hk_id,
-#                 defaults={'diem_tong': diem_ren_luyen}
-#             )
-#
-#             serializer = serializers.DiemRenLuyenSerializer(diem_ren_luyen_entry)
-#             return Response(serializer.data, status=status.HTTP_200_OK)
-#
-#         except SinhVien.DoesNotExist:
-#             return Response({'error': 'Sinh viên không tồn tại'}, status=status.HTTP_404_NOT_FOUND)
-#
-#         except Exception as e:
-#             print(e)
-#             return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)
-
-class UploadFileDiemDanh(APIView):
-    permission_classes = [RolePermission]
-    def post(self, request, hd_ngoaikhoa_id, hk_id , *args, **kwargs):
-        serializer = serializers.UploadFileDiemDanhSerializer(data=request.data)
-        if serializer.is_valid():
-            csv_file = serializer.validated_data['file']
-            decoded_file = csv_file.read().decode('utf-8').splitlines()
-            reader = csv.reader(decoded_file)
-
-            errors = []
-            for row in reader:
-                try:
-                    mssv = row[0]
-                    sinh_vien=SinhVien.objects.get(mssv=mssv)
-                    hoatdongnk = HoatDongNgoaiKhoa.objects.get(id=hd_ngoaikhoa_id)
-                    tham_gia = ThamGia.objects.get(
-                        sinh_vien_id=sinh_vien.id,
-                        hd_ngoaikhoa_id=hd_ngoaikhoa_id
-                    )
-                    tham_gia.trang_thai = ThamGia.TrangThai.DiemDanh
-                    tham_gia.ngay_diem_danh = timezone.now()
-                    tham_gia.save()
-
-                    # CalculateDiemRenLuyen().post(request, sinhvien_id=sinh_vien.id, hk_id=hoatdongnk.hk_nh_id)
-                    DiemRenLuyenViewset.calculate_diem_ren_luyen(self=self,request=request, id_sinh_vien = sinh_vien.id, id_hoc_ky=hk_id)
-                except ThamGia.DoesNotExist:
-                    errors.append(f"Không tìm thấy tham gia với MSSV {mssv} và HK_NH {hoatdongnk.ten_HD_NgoaiKhoa} trong hoạt động ngoại khóa {hd_ngoaikhoa_id}")
-                except Exception as e:
-                    errors.append(f"Đã xảy ra lỗi với MSSV {mssv}: {str(e)}")
-
-            if errors:
-                print(errors)
-                return Response({"errors": errors}, status=status.HTTP_400_BAD_REQUEST)
-            return Response({"message": "Cập nhật trạng thái thành công!"}, status=status.HTTP_201_CREATED)
-
-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
-
-
-
Index: trainingpointAPI/trainingpointAPI/asgi.py
===================================================================
diff --git a/trainingpointAPI/trainingpointAPI/asgi.py b/trainingpointAPI/trainingpointAPI/asgi.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpointAPI/asgi.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,16 +0,0 @@
-"""
-ASGI config for trainingpointappp project.
-
-It exposes the ASGI callable as a module-level variable named ``application``.
-
-For more information on this file, see
-https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
-"""
-
-import os
-
-from django.core.asgi import get_asgi_application
-
-os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'trainingpointappp.settings')
-
-application = get_asgi_application()
Index: trainingpointAPI/trainingpoint/paginators.py
===================================================================
diff --git a/trainingpointAPI/trainingpoint/paginators.py b/trainingpointAPI/trainingpoint/paginators.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpoint/paginators.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,16 +0,0 @@
-from rest_framework import pagination
-
-class SinhVienPaginator(pagination.PageNumberPagination):
-    page_size = 5
-
-class LopPaginator(pagination.PageNumberPagination):
-    page_size = 5
-
-class BaiVietPaginator(pagination.PageNumberPagination):
-    page_size = 5
-
-
-class CommentPaginator(pagination.PageNumberPagination):
-    page_size = 5
-
-
Index: trainingpointAPI/trainingpoint/serializers.py
===================================================================
diff --git a/trainingpointAPI/trainingpoint/serializers.py b/trainingpointAPI/trainingpoint/serializers.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpoint/serializers.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,167 +0,0 @@
-from rest_framework import serializers
-from trainingpoint.models import *
-from rest_framework import serializers
-from django.contrib.auth import get_user_model
-from django.contrib.auth.models import AnonymousUser
-
-from .models import TaiKhoan, SinhVien, Lop
-from django.core.files.base import ContentFile
-from cloudinary.uploader import upload
-
-import requests
-
-
-class KhoaSerializer(serializers.ModelSerializer):
-    class Meta:
-        model = Khoa
-        fields = '__all__'
-
-
-class LopSerializer(serializers.ModelSerializer):
-    class Meta:
-        model = Lop
-        fields = '__all__'
-
-
-
-class TaiKhoanSerializer(serializers.ModelSerializer):
-
-    class Meta:
-        model = TaiKhoan
-        fields = ['id', 'email', 'username', 'password', 'avatar', 'role', 'first_name', 'last_name']
-        extra_kwargs = {
-            'password': {
-                'write_only': True
-            }
-        }
-
-    def to_representation(self, instance):
-        req = super().to_representation(instance)
-        req['avatar'] = instance.avatar.url
-        return req
-
-    def create(self, validated_data):
-        data=validated_data.copy();
-        taiKhoan = TaiKhoan(**data)
-        taiKhoan.set_password(taiKhoan.password)
-        taiKhoan.save()
-        return taiKhoan
-
-
-class ItemSerializer(serializers.ModelSerializer):
-    def to_representation(self, instance):
-        rep = super().to_representation(instance)
-        rep['image'] = instance.image.url
-
-        return rep
-
-
-
-class HockyNamhocSerializer(serializers.ModelSerializer):
-    class Meta:
-        model = HocKy_NamHoc
-        fields = '__all__'
-
-
-class DieuSerializer(serializers.ModelSerializer):
-    class Meta:
-        model = Dieu
-        fields = '__all__'
-
-
-class HoatDongNgoaiKhoaSerializer(serializers.ModelSerializer):
-    class Meta:
-        model = HoatDongNgoaiKhoa
-        fields = '__all__'
-
-
-class BaoCaoSerializer(serializers.ModelSerializer):
-    sinh_vien = serializers.CharField(source='sinh_vien.ho_ten')
-    mssv= serializers.CharField(source='sinh_vien.mssv')
-    lop = serializers.CharField(source='sinh_vien.lop.ten_lop')
-    khoa = serializers.CharField(source='sinh_vien.lop.khoa.ten_khoa')
-    xep_loai = serializers.SerializerMethodField()
-
-    class Meta:
-        model = DiemRenLuyen
-        fields = ['sinh_vien','mssv', 'lop', 'khoa', 'diem_tong', 'xep_loai']
-
-    def get_xep_loai(self, obj):
-        return obj.get_xep_loai_display()
-
-class ThamGiaSerializer(serializers.ModelSerializer):
-    class Meta:
-        model = ThamGia
-        fields = '__all__'
-
-
-class MinhChungSerializer(serializers.ModelSerializer):
-    def to_representation(self, instance):
-        req = super().to_representation(instance)
-        req['anh_minh_chung'] = instance.anh_minh_chung.url
-        return req
-
-    class Meta:
-        model = MinhChung
-        fields = '__all__'
-
-
-class BaiVietSerializer(serializers.ModelSerializer):
-
-    class Meta:
-        model = BaiViet
-        fields = ['id', 'title', 'image', 'tro_ly', 'hd_ngoaikhoa', 'content']
-
-    def to_representation(self, instance):
-        req = super().to_representation(instance)
-        req['image'] = instance.image.url
-        return req
-
-
-class LikeSerializer(serializers.ModelSerializer):
-    class Meta:
-        model = Like
-        fields = '__all__'
-
-
-class CommentSerializer(serializers.ModelSerializer):
-    class Meta:
-        model = Comment
-        fields = '__all__'
-
-
-class DiemRenLuyenSerializer(serializers.ModelSerializer):
-
-    class Meta:
-        model = DiemRenLuyen
-        fields = '__all__'
-
-
-
-class SinhVienSerializer(serializers.ModelSerializer):
-
-    class Meta:
-        model = SinhVien
-        fields = ['id','mssv', 'email', 'ho_ten', 'ngay_sinh', 'lop', 'dia_chi', 'gioi_tinh']
-
-class AuthenticatedBaiVietTagSerializer(BaiVietSerializer):
-    liked = serializers.SerializerMethodField()
-
-    def get_liked(self, bai_viet):
-        request = self.context.get('request')
-        if request and request.user.is_authenticated:
-            return bai_viet.like_set.filter(tai_khoan=request.user, active=True).exists()
-
-    class Meta:
-        model = BaiVietSerializer.Meta.model
-        fields = BaiVietSerializer.Meta.fields + ['liked']
-
-
-class UploadFileDiemDanhSerializer(serializers.Serializer):
-    file = serializers.FileField()
-
-
-class TroLySinhVien_KhoaSerializer(serializers.ModelSerializer):
-    class Meta:
-        model = TroLySinhVien_Khoa
-        fields = '__all__'
\ No newline at end of file
Index: trainingpointAPI/requirements.txt
===================================================================
diff --git a/trainingpointAPI/requirements.txt b/trainingpointAPI/requirements.txt
deleted file mode 100644
--- a/trainingpointAPI/requirements.txt	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,58 +0,0 @@
-asgiref==3.8.1
-CacheControl==0.14.0
-cachetools==5.3.3
-certifi==2024.2.2
-cffi==1.16.0
-chardet==5.2.0
-charset-normalizer==3.3.2
-cloudinary==1.40.0
-cryptography==42.0.7
-Django==5.0.6
-django-ckeditor==6.7.1
-django-js-asset==2.2.0
-django-oauth-toolkit==2.3.0
-django-rest-framework==0.1.0
-djangorestframework==3.15.1
-drf-yasg==1.21.7
-firebase-admin==6.5.0
-google-api-core==2.19.0
-google-api-python-client==2.133.0
-google-auth==2.30.0
-google-auth-httplib2==0.2.0
-google-cloud-core==2.4.1
-google-cloud-firestore==2.16.0
-google-cloud-storage==2.17.0
-google-crc32c==1.5.0
-google-resumable-media==2.7.1
-googleapis-common-protos==1.63.1
-grpcio==1.64.1
-grpcio-status==1.62.2
-httplib2==0.22.0
-idna==3.7
-inflection==0.5.1
-jwcrypto==1.5.6
-msgpack==1.0.8
-oauthlib==3.2.2
-packaging==24.0
-pillow==10.3.0
-proto-plus==1.23.0
-protobuf==4.25.3
-pyasn1==0.6.0
-pyasn1_modules==0.4.0
-pycparser==2.22
-PyJWT==2.8.0
-PyMySQL==1.1.1
-pyparsing==3.1.2
-pytz==2024.1
-PyYAML==6.0.1
-reportlab==4.2.0
-requests==2.32.2
-rsa==4.9
-setuptools==70.0.0
-six==1.16.0
-sqlparse==0.5.0
-typing_extensions==4.12.0
-tzdata==2024.1
-Unidecode==1.3.8
-uritemplate==4.1.1
-urllib3==2.2.1
Index: trainingpointAPI/trainingpoint/send_mail.py
===================================================================
diff --git a/trainingpointAPI/trainingpoint/send_mail.py b/trainingpointAPI/trainingpoint/send_mail.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpoint/send_mail.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,13 +0,0 @@
-from django.core.mail import send_mail
-from rest_framework import viewsets
-from rest_framework.response import Response
-
-class SendEmailViewSet(viewsets.ViewSet):
-    def create(self, request):
-        subject = request.data.get('subject')
-        message = request.data.get('message')
-        recipient_list = [request.data.get('recipient')]
-        sender = 'phamngoctruongson2003@gmail.com'
-
-        send_mail(subject, message, sender, recipient_list)
-        return Response({'success': True})
\ No newline at end of file
Index: trainingpointAPI/trainingpoint/migrations/0003_dieu_diem_toi_da_alter_thamgia_trang_thai.py
===================================================================
diff --git a/trainingpointAPI/trainingpoint/migrations/0003_dieu_diem_toi_da_alter_thamgia_trang_thai.py b/trainingpointAPI/trainingpoint/migrations/0003_dieu_diem_toi_da_alter_thamgia_trang_thai.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpoint/migrations/0003_dieu_diem_toi_da_alter_thamgia_trang_thai.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,24 +0,0 @@
-# Generated by Django 5.0.6 on 2024-06-08 10:51
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('trainingpoint', '0002_alter_diemrenluyen_xep_loai_and_more'),
-    ]
-
-    operations = [
-        migrations.AddField(
-            model_name='dieu',
-            name='diem_toi_da',
-            field=models.IntegerField(default=10),
-            preserve_default=False,
-        ),
-        migrations.AlterField(
-            model_name='thamgia',
-            name='trang_thai',
-            field=models.IntegerField(choices=[(0, 'Đăng Ký'), (1, 'Điểm Danh'), (2, 'Báo Thiếu'), (3, 'Không Hợp Lý')], null=True),
-        ),
-    ]
Index: trainingpointAPI/trainingpoint/apps.py
===================================================================
diff --git a/trainingpointAPI/trainingpoint/apps.py b/trainingpointAPI/trainingpoint/apps.py
deleted file mode 100644
--- a/trainingpointAPI/trainingpoint/apps.py	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
+++ /dev/null	(revision 7f23ae11d2b17b32d619b4f901b14b0bdaec3c95)
@@ -1,5 +0,0 @@
-from django.apps import AppConfig
-
-class TrainingpointConfig(AppConfig):
-    default_auto_field = 'django.db.models.BigAutoField'
-    name = 'trainingpoint'
\ No newline at end of file
diff --git a/trainingpointAPI/trainingpointAPI/__init__.py b/trainingpointAPI/trainingpointAPI/__init__.py
deleted file mode 100644
diff --git a/trainingpointAPI/trainingpoint/firebase/__init__.py b/trainingpointAPI/trainingpoint/firebase/__init__.py
deleted file mode 100644
diff --git a/trainingpointAPI/trainingpoint/migrations/__init__.py b/trainingpointAPI/trainingpoint/migrations/__init__.py
deleted file mode 100644
diff --git a/trainingpointAPI/__init__.py b/trainingpointAPI/__init__.py
deleted file mode 100644
diff --git a/trainingpointAPI/trainingpoint/__init__.py b/trainingpointAPI/trainingpoint/__init__.py
deleted file mode 100644
